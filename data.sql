-- MySQL dump 10.13  Distrib 5.7.28, for Win64 (x86_64)
--
-- Host: localhost    Database: blog
-- ------------------------------------------------------
-- Server version	5.7.28

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `auth_group`
--

DROP TABLE IF EXISTS `auth_group`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_group` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(150) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_group`
--

LOCK TABLES `auth_group` WRITE;
/*!40000 ALTER TABLE `auth_group` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_group` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_group_permissions`
--

DROP TABLE IF EXISTS `auth_group_permissions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_group_permissions` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `group_id` int(11) NOT NULL,
  `permission_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `auth_group_permissions_group_id_permission_id_0cd325b0_uniq` (`group_id`,`permission_id`),
  KEY `auth_group_permissio_permission_id_84c5c92e_fk_auth_perm` (`permission_id`),
  CONSTRAINT `auth_group_permissio_permission_id_84c5c92e_fk_auth_perm` FOREIGN KEY (`permission_id`) REFERENCES `auth_permission` (`id`),
  CONSTRAINT `auth_group_permissions_group_id_b120cbf9_fk_auth_group_id` FOREIGN KEY (`group_id`) REFERENCES `auth_group` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_group_permissions`
--

LOCK TABLES `auth_group_permissions` WRITE;
/*!40000 ALTER TABLE `auth_group_permissions` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_group_permissions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_permission`
--

DROP TABLE IF EXISTS `auth_permission`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_permission` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `content_type_id` int(11) NOT NULL,
  `codename` varchar(100) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `auth_permission_content_type_id_codename_01ab375a_uniq` (`content_type_id`,`codename`),
  CONSTRAINT `auth_permission_content_type_id_2f476e4b_fk_django_co` FOREIGN KEY (`content_type_id`) REFERENCES `django_content_type` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=49 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_permission`
--

LOCK TABLES `auth_permission` WRITE;
/*!40000 ALTER TABLE `auth_permission` DISABLE KEYS */;
INSERT INTO `auth_permission` VALUES (1,'Can add log entry',1,'add_logentry'),(2,'Can change log entry',1,'change_logentry'),(3,'Can delete log entry',1,'delete_logentry'),(4,'Can view log entry',1,'view_logentry'),(5,'Can add permission',2,'add_permission'),(6,'Can change permission',2,'change_permission'),(7,'Can delete permission',2,'delete_permission'),(8,'Can view permission',2,'view_permission'),(9,'Can add group',3,'add_group'),(10,'Can change group',3,'change_group'),(11,'Can delete group',3,'delete_group'),(12,'Can view group',3,'view_group'),(13,'Can add user',4,'add_user'),(14,'Can change user',4,'change_user'),(15,'Can delete user',4,'delete_user'),(16,'Can view user',4,'view_user'),(17,'Can add content type',5,'add_contenttype'),(18,'Can change content type',5,'change_contenttype'),(19,'Can delete content type',5,'delete_contenttype'),(20,'Can view content type',5,'view_contenttype'),(21,'Can add session',6,'add_session'),(22,'Can change session',6,'change_session'),(23,'Can delete session',6,'delete_session'),(24,'Can view session',6,'view_session'),(25,'Can add blog type',7,'add_blogtype'),(26,'Can change blog type',7,'change_blogtype'),(27,'Can delete blog type',7,'delete_blogtype'),(28,'Can view blog type',7,'view_blogtype'),(29,'Can add blog',8,'add_blog'),(30,'Can change blog',8,'change_blog'),(31,'Can delete blog',8,'delete_blog'),(32,'Can view blog',8,'view_blog'),(33,'Can add read num',9,'add_readnum'),(34,'Can change read num',9,'change_readnum'),(35,'Can delete read num',9,'delete_readnum'),(36,'Can view read num',9,'view_readnum'),(37,'Can add comment',10,'add_comment'),(38,'Can change comment',10,'change_comment'),(39,'Can delete comment',10,'delete_comment'),(40,'Can view comment',10,'view_comment'),(41,'Can add like record',11,'add_likerecord'),(42,'Can change like record',11,'change_likerecord'),(43,'Can delete like record',11,'delete_likerecord'),(44,'Can view like record',11,'view_likerecord'),(45,'Can add like count',12,'add_likecount'),(46,'Can change like count',12,'change_likecount'),(47,'Can delete like count',12,'delete_likecount'),(48,'Can view like count',12,'view_likecount');
/*!40000 ALTER TABLE `auth_permission` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_user`
--

DROP TABLE IF EXISTS `auth_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `password` varchar(128) NOT NULL,
  `last_login` datetime(6) DEFAULT NULL,
  `is_superuser` tinyint(1) NOT NULL,
  `username` varchar(150) NOT NULL,
  `first_name` varchar(30) NOT NULL,
  `last_name` varchar(150) NOT NULL,
  `email` varchar(254) NOT NULL,
  `is_staff` tinyint(1) NOT NULL,
  `is_active` tinyint(1) NOT NULL,
  `date_joined` datetime(6) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_user`
--

LOCK TABLES `auth_user` WRITE;
/*!40000 ALTER TABLE `auth_user` DISABLE KEYS */;
INSERT INTO `auth_user` VALUES (1,'pbkdf2_sha256$150000$z8ibgdd3Zshm$mxwuRNfPJ0AWT2oS9Dz6mpSINafagDLZAdHCM2BdtHg=','2020-03-07 15:19:03.000000',1,'jiang','','','1210457866@qq.com',1,1,'2020-02-20 10:20:17.000000'),(6,'pbkdf2_sha256$150000$NXwtHNPsCci4$VH2bvSQ/PrGtu1l4AKdoniOvOt4r8DFaO4+8bKJcBy8=','2020-03-06 13:19:18.000000',0,'root1','','','',0,1,'2020-03-06 13:19:04.000000');
/*!40000 ALTER TABLE `auth_user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_user_groups`
--

DROP TABLE IF EXISTS `auth_user_groups`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_user_groups` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `group_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `auth_user_groups_user_id_group_id_94350c0c_uniq` (`user_id`,`group_id`),
  KEY `auth_user_groups_group_id_97559544_fk_auth_group_id` (`group_id`),
  CONSTRAINT `auth_user_groups_group_id_97559544_fk_auth_group_id` FOREIGN KEY (`group_id`) REFERENCES `auth_group` (`id`),
  CONSTRAINT `auth_user_groups_user_id_6a12ed8b_fk_auth_user_id` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_user_groups`
--

LOCK TABLES `auth_user_groups` WRITE;
/*!40000 ALTER TABLE `auth_user_groups` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_user_groups` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_user_user_permissions`
--

DROP TABLE IF EXISTS `auth_user_user_permissions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_user_user_permissions` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `permission_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `auth_user_user_permissions_user_id_permission_id_14a6b632_uniq` (`user_id`,`permission_id`),
  KEY `auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm` (`permission_id`),
  CONSTRAINT `auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm` FOREIGN KEY (`permission_id`) REFERENCES `auth_permission` (`id`),
  CONSTRAINT `auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_user_user_permissions`
--

LOCK TABLES `auth_user_user_permissions` WRITE;
/*!40000 ALTER TABLE `auth_user_user_permissions` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_user_user_permissions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `blog_blog`
--

DROP TABLE IF EXISTS `blog_blog`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `blog_blog` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(48) NOT NULL,
  `content` longtext NOT NULL,
  `created_time` datetime(6) NOT NULL,
  `last_updated_time` datetime(6) NOT NULL,
  `author_id` int(11) NOT NULL,
  `blog_type_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `blog_blog_author_id_8791af69_fk_auth_user_id` (`author_id`),
  KEY `blog_blog_blog_type_id_de11bd65_fk_blog_blogtype_id` (`blog_type_id`),
  CONSTRAINT `blog_blog_author_id_8791af69_fk_auth_user_id` FOREIGN KEY (`author_id`) REFERENCES `auth_user` (`id`),
  CONSTRAINT `blog_blog_blog_type_id_de11bd65_fk_blog_blogtype_id` FOREIGN KEY (`blog_type_id`) REFERENCES `blog_blogtype` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=23 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blog_blog`
--

LOCK TABLES `blog_blog` WRITE;
/*!40000 ALTER TABLE `blog_blog` DISABLE KEYS */;
INSERT INTO `blog_blog` VALUES (5,'DRF源码解析1','## 截取APIView\r\n```python\r\n@classmethod\r\nclass APIView(View):\r\n	def as_view(cls, **initkwargs):\r\n		if isinstance(getattr(cls, \'queryset\', None), models.query.QuerySet):\r\n		def force_evaluation():\r\n		raise RuntimeError(\r\n		\'Do not evaluate the `.queryset` attribute directly, \'\r\n		\'as the result will be cached and reused between requests. \'\r\n		\'Use `.all()` or call `.get_queryset()` instead.\'\r\n		)\r\n		cls.queryset._fetch_all = force_evaluation\r\n		# 继承了django中View类的的as_view()方法,然后重写了dispatch方法\r\n		view = super().as_view(**initkwargs)\r\n		view.cls = cls\r\n		view.initkwargs = initkwargs\r\n\r\n		return csrf_exempt(view)\r\n\r\n\r\n	def dispatch(self, request, *args, **kwargs):\r\n		self.args = args\r\n		self.kwargs = kwargs\r\n		# 在传入request是,apiview对request进行了一次包装\r\n		request = self.initialize_request(request, *args, **kwargs)\r\n		# 此时self.request是initialize_request方法返回的Request\r\n		self.request = request\r\n		self.headers = self.default_response_headers  # deprecate?\r\n\r\n		try:\r\n		# 相比于View类的dispatch方法,Apiview在这里进行了一次初始化的方法\r\n		self.initial(request, *args, **kwargs)\r\n\r\n		# Get the appropriate handler method\r\n		if request.method.lower() in self.http_method_names:\r\n		handler = getattr(self, request.method.lower(),\r\n		self.http_method_not_allowed)\r\n		else:\r\n		handler = self.http_method_not_allowed\r\n\r\n		response = handler(request, *args, **kwargs)\r\n\r\n		except Exception as exc:\r\n		response = self.handle_exception(exc)\r\n\r\n		self.response = self.finalize_response(request, response, *args, **kwargs)\r\n		return self.response\r\n```\r\n## 进入self.initalize_request()\r\n```python\r\ndef initialize_request(self, request, *args, **kwargs):\r\n	parser_context = self.get_parser_context(request)\r\n	# 可以看到, request已经被封装成Request返回,而request则被封装成Request的一个属性\r\n	return Request(\r\n	request,\r\n	parsers=self.get_parsers(),\r\n	authenticators=self.get_authenticators(),\r\n	negotiator=self.get_content_negotiator(),\r\n	parser_context=parser_context\r\n	)\r\n```\r\n\r\n## 截取Ruquest\r\n```python\r\nclass Request:\r\n    def __init__(self, request, parsers=None, authenticators=None,\r\n                 negotiator=None, parser_context=None):\r\n        assert isinstance(request, HttpRequest), (\r\n            \'The `request` argument must be an instance of \'\r\n            \'`django.http.HttpRequest`, not `{}.{}`.\'\r\n            .format(request.__class__.__module__, request.__class__.__name__)\r\n        )\r\n		# request被封装了私有属性\r\n        self._request = request\r\n    @property\r\n    def content_type(self):\r\n        meta = self._request.META\r\n		# 封装了content_type方法获取传输类型\r\n        return meta.get(\'CONTENT_TYPE\', meta.get(\'HTTP_CONTENT_TYPE\', \'\'))\r\n\r\n    @property\r\n    def query_params(self):\r\n        \"\"\"\r\n        More semantically correct name for request.GET.\r\n        \"\"\"\r\n		# django的view中的request.Get属性封装成了query_params属性\r\n        return self._request.GET\r\n\r\n    @property\r\n    def data(self):\r\n        if not _hasattr(self, \'_full_data\'):\r\n            self._load_data_and_files()\r\n		# django的view中的request.Post属性封装成了data属性\r\n        return self._full_data\r\n```','2020-02-22 16:04:03.539171','2020-02-22 16:04:03.539171',1,1),(9,'DRF源码解析2','# viewsets\r\ndrf中  viewsets  对  view  进行了更加深层的封装,在CBV编程中减少代码的冗余,截取viewsets源码如下\r\n```python\r\nclass ModelViewSet(mixins.CreateModelMixin,\r\n                   mixins.RetrieveModelMixin,\r\n                   mixins.UpdateModelMixin,\r\n                   mixins.DestroyModelMixin,\r\n                   mixins.ListModelMixin,\r\n                   GenericViewSet):\r\n# 可以看到viewsets中的ModelViewSet只是继承了各种类,每一个类对应CBV的每一个方法,如CreateModelMixin则对应post方法\r\n    pass\r\n```\r\n\r\n\r\n进入GenericViewSet的源码中,不难发现,GenericViewSet这个类主要是获取我们的数据和处理数据的组件\r\n```python\r\nclass GenericViewSet(ViewSetMixin, generics.GenericAPIView):\r\n    # GenericViewSet同样是继承了两个类\r\n    pass\r\n```\r\n进入generics.GenericAPIView\r\n```python\r\nclass GenericAPIView(views.APIView):\r\n   # queryset就是获取的ORM对象\r\n    queryset = None\r\n   # serializer_class是序列化的类\r\n    serializer_class = None\r\n\r\n    lookup_field = \'pk\'\r\n    lookup_url_kwarg = None\r\n\r\n    # The filter backend classes to use for queryset filtering\r\n    filter_backends = api_settings.DEFAULT_FILTER_BACKENDS\r\n\r\n    # The style to use for queryset pagination.\r\n	# pagination_class就是和分页组件相关的类,默认为drf配置中的组件\r\n    pagination_class = api_settings.DEFAULT_PAGINATION_CLASS\r\n\r\n    def get_queryset(self):\r\n		# 这里断言就是为了说明在继承这个类时,一定要有queryset属性或覆盖这个方法\r\n        assert self.queryset is not None, (\r\n            \"\'%s\' should either include a `queryset` attribute, \"\r\n            \"or override the `get_queryset()` method.\"\r\n            % self.__class__.__name__\r\n        )\r\n		# 获取ORM对象\r\n        queryset = self.queryset\r\n        if isinstance(queryset, QuerySet):\r\n            # Ensure queryset is re-evaluated on each request.\r\n            queryset = queryset.all()\r\n        return queryset\r\n\r\n    def get_serializer(self, *args, **kwargs):\r\n        serializer_class = self.get_serializer_class()\r\n        kwargs[\'context\'] = self.get_serializer_context()\r\n		# serializer_class接收的参数可能不同\r\n        return serializer_class(*args, **kwargs)\r\n\r\n    def get_serializer_class(self):\r\n		# 继承这个类时,一定要有serializer_classt属性或覆盖这个方法\r\n        assert self.serializer_class is not None, (\r\n            \"\'%s\' should either include a `serializer_class` attribute, \"\r\n            \"or override the `get_serializer_class()` method.\"\r\n            % self.__class__.__name__\r\n        )\r\n\r\n        return self.serializer_class\r\n\r\n    def get_serializer_context(self):\r\n        return {\r\n            \'request\': self.request,\r\n            \'format\': self.format_kwarg,\r\n            \'view\': self\r\n        }\r\n\r\n    def filter_queryset(self, queryset):\r\n        for backend in list(self.filter_backends):\r\n            queryset = backend().filter_queryset(self.request, queryset, self)\r\n        return queryset\r\n```\r\n\r\n接着回到ModelViewSet中,进入到mixins.CreateModelMixin的源码中\r\n```python\r\nclass CreateModelMixin:\r\n    \"\"\"\r\n    Create a model instance.\r\n    \"\"\"\r\n    def create(self, request, *args, **kwargs):\r\n		# 这里调用的就是GenericAPIView中的get_serializer\r\n        serializer = self.get_serializer(data=request.data)\r\n        serializer.is_valid(raise_exception=True)\r\n        self.perform_create(serializer)\r\n        headers = self.get_success_headers(serializer.data)\r\n        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)\r\n\r\n    def perform_create(self, serializer):\r\n        serializer.save()\r\n\r\n    def get_success_headers(self, data):\r\n        try:\r\n            return {\'Location\': str(data[api_settings.URL_FIELD_NAME])}\r\n        except (TypeError, KeyError):\r\n            return {}\r\n```\r\n\r\n\r\n现在我们只需要继承ModelViewSet,然后重写queryset和处理数据所需要的组件类如序列化的类等,但是怎么将self.post对应上self.list方法呢,GenericViewSet还继承了ViewSetMixin,看一下ViewSetMixin的源码的截取\r\n```python\r\nclass ViewSetMixin:\r\n    @classonlymethod\r\n	# 对as_view()方法又一次封装,action表示可以接收参数了\r\n    def as_view(cls, actions=None, **initkwargs):\r\n        if not actions:\r\n            raise TypeError(\"The `actions` argument must be provided when \"\r\n                            \"calling `.as_view()` on a ViewSet. For example \"\r\n                            \"`.as_view({\'get\': \'list\'})`\")\r\n\r\n        def view(request, *args, **kwargs):\r\n            self = cls(**initkwargs)\r\n            # We also store the mapping of request methods to actions,\r\n            # so that we can later set the action attribute.\r\n            # eg. `self.action = \'list\'` on an incoming GET request.\r\n            self.action_map = actions\r\n\r\n            # Bind methods to actions\r\n            # This is the bit that\'s different to a standard view\r\n			# method, action退出action为一个字典,{\'get\':\'list\'}\r\n            for method, action in actions.items():\r\n				#  handler为实例中的各个方法\r\n                handler = getattr(self, action)\r\n				# 这里setattr相当于metmod == handler\r\n                setattr(self, method, handler)\r\n\r\n            if hasattr(self, \'get\') and not hasattr(self, \'head\'):\r\n                self.head = self.get\r\n\r\n            self.request = request\r\n            self.args = args\r\n            self.kwargs = kwargs\r\n\r\n            # And continue as usual\r\n            return self.dispatch(request, *args, **kwargs)\r\n        return csrf_exempt(view)\r\n```\r\n\r\n### 奉献一张图来看下我们的继承顺序\r\n<img src=\"https://i.loli.net/2020/02/19/d53XTFVloNsIiCZ.png\" width = \"100%\" />','2020-02-22 22:27:09.832190','2020-02-22 22:27:09.832190',1,1),(10,'DRF源码解析3','当我们想最方便的使用drf的路由的时候,只需要用DefaultRoute实例化一个路由实例,然后注册,再讲注册后的组件加入urlpatterns即可\r\n```python\r\nfrom rest_framework.routers import DefaultRouter\r\nrouter = DefaultRouter()\r\n# 其中BookModelView继承了viewsets.ModelViewSet\r\nrouter.register(r\'^book\', views.BookModelView)\r\n\r\nurlpatterns += router.urls\r\n```\r\n到底routers底层是怎么样实现的呢\r\n# routers\r\nDefaultRoute是routers组件里的一个类,相当于帮助我们在路由里构建好了如{\'list\':\"create\"}的对应关系,它继承了SimpleRouter,截取源码如下\r\n```python\r\nclass SimpleRouter(BaseRouter):\r\n    routes = [\r\n        # List route.\r\n        Route(\r\n            url=r\'^{prefix}{trailing_slash}$\',\r\n			# 这里构建好了对应关系\r\n            mapping={\r\n                \'get\': \'list\',\r\n                \'post\': \'create\'\r\n            },\r\n            name=\'{basename}-list\',\r\n            detail=False,\r\n            initkwargs={\'suffix\': \'List\'}\r\n        ),\r\n\r\n    def __init__(self, trailing_slash=True):\r\n        self.trailing_slash = \'/\' if trailing_slash else \'\'\r\n        super().__init__()\r\n\r\n    def get_default_basename(self, viewset):\r\n        \"\"\"\r\n        If `basename` is not specified, attempt to automatically determine\r\n        it from the viewset.\r\n        \"\"\"\r\n        queryset = getattr(viewset, \'queryset\', None)\r\n\r\n        assert queryset is not None, \'`basename` argument not specified, and could \' \\\r\n            \'not automatically determine the name from the viewset, as \' \\\r\n            \'it does not have a `.queryset` attribute.\'\r\n\r\n        return queryset.model._meta.object_name.lower()\r\n\r\n    def get_routes(self, viewset):\r\n		# 获取对应关系\r\n        known_actions = list(flatten([route.mapping.values() for route in self.routes if isinstance(route, Route)]))\r\n		# 找出viewsets里所有的方法\r\n        extra_actions = viewset.get_extra_actions()\r\n\r\n        # checking action names against the known actions list\r\n		# 判断路由的方法对应的viewsets的方法\r\n        not_allowed = [\r\n            action.__name__ for action in extra_actions\r\n            if action.__name__ in known_actions\r\n        ]\r\n        if not_allowed:\r\n            msg = (\'Cannot use the @action decorator on the following \'\r\n                   \'methods, as they are existing routes: %s\')\r\n            raise ImproperlyConfigured(msg % \', \'.join(not_allowed))\r\n\r\n        # partition detail and list actions\r\n        detail_actions = [action for action in extra_actions if action.detail]\r\n        list_actions = [action for action in extra_actions if not action.detail]\r\n\r\n        routes = []\r\n        for route in self.routes:\r\n            if isinstance(route, DynamicRoute) and route.detail:\r\n                routes += [self._get_dynamic_route(route, action) for action in detail_actions]\r\n            elif isinstance(route, DynamicRoute) and not route.detail:\r\n                routes += [self._get_dynamic_route(route, action) for action in list_actions]\r\n            else:\r\n                routes.append(route)\r\n\r\n        return routes\r\n\r\n    def get_urls(self):\r\n        \"\"\"\r\n        Use the registered viewsets to generate a list of URL patterns.\r\n        \"\"\"\r\n        ret = []\r\n		# 这里的self.registry是父类BaseRouter的一个属性\r\n        for prefix, viewset, basename in self.registry:\r\n            lookup = self.get_lookup_regex(viewset)\r\n            routes = self.get_routes(viewset)\r\n		# 这里是对路径进行了不同形式的封装\r\n            for route in routes:\r\n\r\n                # Only actions which actually exist on the viewset will be bound\r\n                mapping = self.get_method_map(viewset, route.mapping)\r\n                if not mapping:\r\n                    continue\r\n\r\n                # Build the url pattern\r\n                regex = route.url.format(\r\n                    prefix=prefix,\r\n                    lookup=lookup,\r\n                    trailing_slash=self.trailing_slash\r\n                )\r\n\r\n                if not prefix and regex[:2] == \'^/\':\r\n                    regex = \'^\' + regex[2:]\r\n\r\n                initkwargs = route.initkwargs.copy()\r\n                initkwargs.update({\r\n                    \'basename\': basename,\r\n                    \'detail\': route.detail,\r\n                })\r\n\r\n                view = viewset.as_view(mapping, **initkwargs)\r\n                name = route.name.format(basename=basename)\r\n                ret.append(url(regex, view, name=name))\r\n\r\n        return ret\r\n```\r\n进入BaseRouter中,截取源码如下:\r\n```python\r\nclass BaseRouter:\r\n    def __init__(self):\r\n		# SimpleRouter的get_urls中的需要的属性\r\n        self.registry = []\r\n\r\n    def register(self, prefix, viewset, basename=None):\r\n		# 如果没有basename,则self.get_default_basename()方法\r\n		# get_default_basename()方法就是报错要求basename必须有,\r\n		# 从而看得出来要想使用router组件必须执行register()方法\r\n        if basename is None:\r\n            basename = self.get_default_basename(viewset)\r\n        self.registry.append((prefix, viewset, basename))\r\n\r\n        # invalidate the urls cache\r\n        if hasattr(self, \'_urls\'):\r\n            del self._urls\r\n\r\n    def get_default_basename(self, viewset):\r\n        \"\"\"\r\n        If `basename` is not specified, attempt to automatically determine\r\n        it from the viewset.\r\n        \"\"\"\r\n        raise NotImplementedError(\'get_default_basename must be overridden\')\r\n\r\n    def get_urls(self):\r\n        \"\"\"\r\n        Return a list of URL patterns, given the registered viewsets.\r\n        \"\"\"\r\n        raise NotImplementedError(\'get_urls must be overridden\')\r\n\r\n    @property\r\n    def urls(self):\r\n        if not hasattr(self, \'_urls\'):\r\n            self._urls = self.get_urls()\r\n        return self._urls\r\n```\r\nDefaultRoute类进行了更好的优化\r\n```python\r\nclass DefaultRouter(SimpleRouter):\r\n    \"\"\"\r\n    The default router extends the SimpleRouter, but also adds in a default\r\n    API root view, and adds format suffix patterns to the URLs.\r\n    \"\"\"\r\n    include_root_view = True\r\n    include_format_suffixes = True\r\n    root_view_name = \'api-root\'\r\n    default_schema_renderers = None\r\n    APIRootView = APIRootView\r\n    APISchemaView = SchemaView\r\n    SchemaGenerator = SchemaGenerator\r\n\r\n    def __init__(self, *args, **kwargs):\r\n        if \'root_renderers\' in kwargs:\r\n            self.root_renderers = kwargs.pop(\'root_renderers\')\r\n        else:\r\n            self.root_renderers = list(api_settings.DEFAULT_RENDERER_CLASSES)\r\n        super().__init__(*args, **kwargs)\r\n\r\n    def get_api_root_view(self, api_urls=None):\r\n        \"\"\"\r\n        Return a basic root view.\r\n        \"\"\"\r\n        api_root_dict = OrderedDict()\r\n        list_name = self.routes[0].name\r\n        for prefix, viewset, basename in self.registry:\r\n            api_root_dict[prefix] = list_name.format(basename=basename)\r\n\r\n        return self.APIRootView.as_view(api_root_dict=api_root_dict)\r\n\r\n    def get_urls(self):\r\n        urls = super().get_urls()\r\n        if self.include_root_view:\r\n            view = self.get_api_root_view(api_urls=urls)\r\n            root_url = url(r\'^$\', view, name=self.root_view_name)\r\n            urls.append(root_url)\r\n\r\n        if self.include_format_suffixes:\r\n            urls = format_suffix_patterns(urls)\r\n\r\n        return urls\r\n```\r\n\r\n最后路由组件创建了怎么样的url?\r\n[![3mDRXt.png](https://s2.ax1x.com/2020/02/20/3mDRXt.png)](https://imgchr.com/i/3mDRXt)','2020-02-22 22:27:29.102484','2020-02-22 22:27:29.102484',1,1),(11,'DRF源码解析4','# 一.DRF中APIView的initial()方法初始化版本信息\r\n在讲到DRF对ruquest的封装时,返回新封装的Request后,DRF执行了initial()方法对组件的初始化\r\n```python\r\n def initial(self, request, *args, **kwargs):\r\n		# 版本控制组件\r\n        version, scheme = self.determine_version(request, *args, **kwargs)\r\n		# 将版本空值信息写入request中\r\n        request.version, request.versioning_scheme = version, scheme\r\n\r\n        # Ensure that the incoming request is permitted\r\n        # 认证组件\r\n        self.perform_authentication(request)\r\n        # 权限组件\r\n        self.check_permissions(request)\r\n        # 频率\r\n        self.check_throttles(request)\r\n```\r\n## 1.1重写determine_version()自定制版本信息\r\n```python\r\n    def determine_version(self, request, *args, **kwargs):\r\n        \"\"\"\r\n        If versioning is being used, then determine any API version for the\r\n        incoming request. Returns a two-tuple of (version, versioning_scheme)\r\n        \"\"\"\r\n        if self.versioning_class is None:\r\n            return (None, None)\r\n		# self.versioning_class是drf配置默认的类,说明我们自定义版本时要重写这个方法\r\n        scheme = self.versioning_class()\r\n        return (scheme.determine_version(request, *args, **kwargs), scheme)\r\n```\r\n\r\n# 二.rest_framework.versioning提供的版本控制方法\r\n![versioning](https://img2018.cnblogs.com/blog/1349080/201809/1349080-20180920153948564-2059678033.png)\r\n## 2.1 BaseVersioning\r\n```python\r\nclass BaseVersioning:\r\n	# default_version(None), allowed_versions(None), version_param可以在settings中重新配置\r\n    default_version = api_settings.DEFAULT_VERSION\r\n    allowed_versions = api_settings.ALLOWED_VERSIONS\r\n    version_param = api_settings.VERSION_PARAM\r\n\r\n    def determine_version(self, request, *args, **kwargs):\r\n		# 在继承该类时要重写determine_version(方法)\r\n        msg = \'{cls}.determine_version() must be implemented.\'\r\n        raise NotImplementedError(msg.format(\r\n            cls=self.__class__.__name__\r\n        ))\r\n\r\n    def reverse(self, viewname, args=None, kwargs=None, request=None, format=None, **extra):\r\n		# 和django.urls.reverse大致相同,\r\n		# 但可以选择接受一个请求并返回使用请求获取基本URL的标准URL。\r\n        return _reverse(viewname, args, kwargs, request, format, **extra)\r\n\r\n    def is_allowed_version(self, version):\r\n        if not self.allowed_versions:\r\n            return True\r\n        return ((version is not None and version == self.default_version) or\r\n                (version in self.allowed_versions))\r\n```\r\n## 2.2 URLPathVersioning\r\n```python\r\nclass URLPathVersioning(BaseVersioning):\r\n    \"\"\"\r\n    To the client this is the same style as `NamespaceVersioning`.\r\n    The difference is in the backend - this implementation uses\r\n    Django\'s URL keyword arguments to determine the version.\r\n\r\n    An example URL conf for two views that accept two different versions.\r\n    可以看到版本信息就在url中\r\n    urlpatterns = [\r\n        url(r\'^(?P<version>[v1|v2]+)/users/$\', users_list, name=\'users-list\'),\r\n        url(r\'^(?P<version>[v1|v2]+)/users/(?P<pk>[0-9]+)/$\', users_detail, name=\'users-detail\')\r\n    ]\r\n\r\n    GET /1.0/something/ HTTP/1.1\r\n    Host: example.com\r\n    Accept: application/json\r\n    \"\"\"\r\n    invalid_version_message = _(\'Invalid version in URL path.\')\r\n\r\n    def determine_version(self, request, *args, **kwargs):\r\n	 # self.version_param,self.default_version是父类中的属性,可以自定义\r\n        version = kwargs.get(self.version_param, self.default_version)\r\n        if version is None:\r\n			# 如果没有自己配置默认为DRF默认的版本信息\r\n            version = self.default_version\r\n\r\n        if not self.is_allowed_version(version):\r\n            raise exceptions.NotFound(self.invalid_version_message)\r\n        return version\r\n\r\n    def reverse(self, viewname, args=None, kwargs=None, request=None, format=None, **extra):\r\n        if request.version is not None:\r\n            kwargs = {} if (kwargs is None) else kwargs\r\n			# self.version_param就是版本的key\r\n            kwargs[self.version_param] = request.version\r\n\r\n        return super().reverse(\r\n            viewname, args, kwargs, request, format, **extra\r\n```\r\n\r\n其他的类基本配置都差不多','2020-02-22 22:28:02.419359','2020-02-22 22:28:02.419359',1,1),(12,'每日一道算法之--二叉树的层次遍历','# 二叉树的层次遍历\r\n力扣第102题 : <https://leetcode-cn.com/problems/binary-tree-level-order-traversal/>\r\n\r\n给定一个二叉树，返回其按层次遍历的节点值。 （即逐层地，从左到右访问所有节点）。\r\n\r\n例如:\r\n>给定二叉树: [3,9,20,null,null,15,7],\r\n    3\r\n   / \\\r\n  9  20\r\n    /  \\\r\n   15   7\r\n\r\n返回其层次遍历结果：\r\n\r\n>[\r\n  [3],\r\n  [9,20],\r\n  [15,7]\r\n]\r\n\r\n### 1.递归\r\n一开始看到这题时,因为之前学过二叉树的知识,所以我知道这道题的第一思路就是递归\r\n但是这道层次遍历的主要问题就是,数是分左右节点的,如果直接递归,那么同一层的左右节点就不会给同时读取.所以,能不能先定义一个变量,专门记录该节点的层级.\r\n然后分析题目的返回值,它是一个子元素是列表的列表,不难发现,子元素的索引,刚好就是数的层级,所以可以直接定义一个列表levels = [],每递归一层,如果大列表中没有该层级的子列表,就往大列表中添加一个字列表,然后往该层级的子列表中添加该节点的值\r\n代码如下:\r\n\r\n```python\r\n# Definition for a binary tree node.\r\n# class TreeNode:\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution:\r\n    def levelOrder(self, root: TreeNode) -> List[List[int]]:\r\n        levels= []\r\n        if not root : return levels\r\n        def foo(node, level):\r\n            n = len(levels)\r\n            if n == level:\r\n                levels.append([])\r\n            levels[level].append(node.val)\r\n            if node.left:\r\n                foo(node.left, level + 1)\r\n            if node.right:\r\n                foo(node.right, level + 1)\r\n        foo(root, 0)\r\n        return levels\r\n```\r\n\r\n#### 1.1 复杂度分析\r\n**时间复杂度:**假设有n个节点,恰好会递归到每一个节点,所以时间复杂度为O(n)\r\n\r\n**空间复杂度:**假设有n个节点,数组存储的刚好是每一个节点,所以空间复杂度为O(n)\r\n\r\n----\r\n\r\n### 2.迭代\r\n实现了递归的方式后,迭代的思想节本和递归差不多,只是要加多一个栈的数据结构\r\n\r\n```python\r\nclass Solution:\r\n    def levelOrder(self, root: TreeNode) -> List[List[int]]:\r\n        levels = []\r\n        stack = []\r\n        if not root: return levels\r\n        stack.append((root, 0))\r\n        while stack:\r\n            node, level = stack.pop()\r\n            if level == len(levels):\r\n                levels.append([])\r\n            levels[level].append(node.val)\r\n            if node.right:\r\n                stack.append((node.right, level + 1))\r\n            if node.left:\r\n                stack.append((node.left, level + 1))\r\n        return levels\r\n```\r\n#### 2.1 复杂度分析\r\n**时间复杂度：**假设有n个节点,恰好会递归到每一个节点,因为每个节点恰好会被运算一次,所以时间复杂度为O(n)\r\n\r\n**空间复杂度：**假设有n个节点,数组存储的刚好是每一个节点,栈的存储也是每一个节点,所以空间复杂度为O(n)+O(n) = O(n)\r\n\r\n## 总结\r\n这道题考察的就是树的遍历,和前后序遍历差不错,但是就是加多了一个变量来记录层级,还是那句话,多加练习,多加练习!!!!!!','2020-03-04 18:24:55.225686','2020-03-04 18:24:55.225686',1,3),(13,'每日一道算法之--买卖股票的最佳时机','# 买卖股票的最佳时机\r\n力扣第121题：<https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/>\r\n给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。\r\n\r\n如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。\r\n\r\n注意你不能在买入股票前卖出股票。\r\n\r\n示例 1:\r\n\r\n>输入: [7,1,5,3,6,4]\r\n输出: 5\r\n解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。\r\n     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。\r\n\r\n示例 2：\r\n>输入: [7,6,4,3,1]\r\n输出: 0\r\n解释: 在这种情况下, 没有交易完成, 所以最大利润为 0\r\n\r\n## 1 暴力方法\r\n暴力方法简单容易理解，只是两次循环把所有的可能一一列举出来。然后在取其中的最大值\r\n```python\r\nclass Solution:\r\n    def maxProfit(self, prices: List[int]) -> int:\r\n        max_profit = 0\r\n        for i in range(len(prices) - 1):\r\n            for j in range(i + 1, len(prices)):\r\n                profit = prices[j] - prices[i]\r\n                max_profit = max(max_profit, profit)\r\n        return max_profit\r\n```\r\n\r\n### 1.1 复杂度分析\r\n\r\n**时间复杂度:**循环里嵌套另一个循环,所里时间复杂度为$$O(N^2)$$\r\n\r\n**空间复杂度:**只使用了max_profit和profit两个变量,所以空间复杂度为$$O(1)$$\r\n\r\n----\r\n\r\n## 2 动态规划遍历一次\r\n+ 由题意不难理解,当前最大的收益就是你当前的价格减去之前的最小价格,所以定义一个变量min_price存储之前的最小值,在定义一个变量max_profit存储最大的收益值,便可以达到遍历一次\r\n\r\n+ 状态转移方程为dp[i] = max(dp[i-1]+diff[i], 0), dp[i])指以i元素结尾的子数组的最大和\r\n```python\r\nclass Solution:\r\n    def maxProfit(self, prices: List[int]) -> int:\r\n        min_price = float(\'inf\')\r\n        max_profit = 0\r\n        for i in range(len(prices)):\r\n            min_price = min(prices[i], min_price)\r\n            max_profit = max(max_profit, prices[i]-min_price)\r\n        return max_profit\r\n```\r\n\r\n### 2.1 复杂度分析\r\n\r\n**时间复杂度:**遍历了一次数组,所以时间复杂度为$$O(N)$$\r\n\r\n**空间复杂度:**只使用了min_price和max_profit两个变量,所以空间复杂度为$$O(1)$$','2020-03-04 18:25:16.630136','2020-03-04 18:25:16.630136',1,3),(14,'每日一道算法之--三数之和','# 三数之和\r\n力扣第15题：<https://leetcode-cn.com/problems/3sum/>\r\n给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？找出所有满足条件且不重复的三元组。\r\n\r\n注意：答案中不可以包含重复的三元组。\r\n\r\n示例：\r\n\r\n>给定数组 nums = [-1, 0, 1, 2, -1, -4]，\r\n满足要求的三元组集合为：\r\n[\r\n  [-1, 0, 1],\r\n  [-1, -1, 2]\r\n]\r\n\r\n## 1. 排序 + 双指针解法\r\n题目中的要求是不能含有相同的三元组，所以在算法中我们需要去重，**排序**是一个很好的方法，因为排序可以让相同的数连载一起，方便判断去重。让后在通过**双指针**对数组一一检查，找到所有合适的三元组。\r\n```python\r\nclass Solution:\r\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\r\n        # 先将nums排序\r\n        nums.sort()\r\n        res = []\r\n        for i in range(len(nums) - 2):\r\n            # 设置两个指针\r\n            l, r = i + 1, len(nums) - 1\r\n            if nums[i] > 0 : return res\r\n            # 去除重复的判断,因为nums[i -1]已经包含了nums[i]的所有组合的可能性\r\n            if i > 0 and nums[i] == nums[i - 1] : continue\r\n            while l < r:\r\n                s = nums[i] + nums[l] + nums[r]\r\n                if s < 0:\r\n                    # 如果和小于0，证明左边的数太小了，需要往后移\r\n                    l += 1\r\n                    # 去除重复的判断，但是前提条件为l<r\r\n                    while l < r and nums[l] == nums[l - 1]: l += 1\r\n                elif s > 0:\r\n                    r -= 1\r\n                    # 如果和大于0，证明右边的数太大了，需要往前移\r\n                    while l < r and nums[r] == nums[r + 1]: r -= 1\r\n                else:\r\n                    res.append([nums[i], nums[l], nums[r]])\r\n                    l += 1\r\n                    r -= 1\r\n                    while l < r and nums[l] == nums[l - 1]: l += 1\r\n                    while l < r and nums[r] == nums[r + 1]: r -= 1\r\n        return res\r\n```\r\n### 1.1 时间复杂度分析\r\n **时间复杂度：**排序的时间复杂度为 O(NlogN), 遍历数组为O(N),双指针的遍历为O(N),所以总的时间复杂度为$$O(NlogN)+0(N)*O(N) = O(N^2)$$  \r\n \r\n **空间复杂度：**没有用到额外的数据结构，所以空间复杂度为$$O(1)$$\r\n[![38vbKx.png](https://s2.ax1x.com/2020/02/24/38vbKx.png)](https://imgchr.com/i/38vbKx)\r\n------------\r\n\r\n\r\n## 2.哈希索引的方法（空间换时间）\r\n参考[两数之和](https://leetcode-cn.com/problems/two-sum/ \"两数之和\")，我们可以构建哈希表的方法使查找效率变得更高。\r\n```python\r\nclass Solution:\r\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\r\n        if len(nums) < 3:\r\n            return []\r\n        nums.sort()\r\n        # 因为a+b = 0等价于a = -b\r\n        target_hash = {-x: i for i, x in enumerate(nums)}\r\n        res = []\r\n        res_hash = {}\r\n        # 从零开始检索,到倒数第二位结束\r\n        for i, first in enumerate(nums[:-1]):\r\n            if nums[i] > 0: return res\r\n            if i > 0 and first == nums[i - 1]:\r\n                continue\r\n            #从第一个指针的下一位开始搜索 \r\n            for j, second in enumerate(nums[i + 1:]):\r\n                # 检查两数之和是否存在于哈希表target_hash中\r\n                if first + second in target_hash:\r\n                    target_index = target_hash[first + second]\r\n                    if target_index == i or target_index == i + j + 1:\r\n                        continue\r\n                    # 将找到的结果存入另一个哈希表中, 避免包含重复结果\r\n                    row = sorted([first, second, nums[target_index]])\r\n                    key = \",\".join([str(x) for x in row])\r\n                    if key not in res_hash:\r\n                        res.append(row)\r\n                        res_hash[key] = True\r\n        return res\r\n```\r\n\r\n![38x8dU.png](https://s2.ax1x.com/2020/02/24/38x8dU.png)','2020-03-04 18:25:36.532343','2020-03-04 18:25:36.532343',1,3),(15,'每日一道算法之--乘积最大子序和','# 乘积最大子序和\r\n力扣第152题:<https://leetcode-cn.com/problems/maximum-product-subarray/>\r\n给定一个整数数组 nums ，找出一个序列中乘积最大的连续子序列（该序列至少包含一个数）。\r\n\r\n示例 1:\r\n>输入: [2,3,-2,4]\r\n输出: 6\r\n解释: 子数组 [2,3] 有最大乘积 6。\r\n\r\n示例 2:\r\n>输入: [-2,0,-1]\r\n输出: 0\r\n解释: 结果不能为 2, 因为 [-2,-1] 不是子数组。\r\n\r\n## 1. 类似指针的解法\r\n参考力扣第53题[最大子序和](https://leetcode-cn.com/problems/maximum-subarray/)的其中一种双指针解法,这道题同样可以用类似指针的解法  \r\n1. 首先定义一个res记录最大的子序和,cur_pos记录当前的乘积\r\n2. 然后cur_pos依次累乘, 每一次的结果都有三种情况:\r\n    + cur_pos等于0, 这时候要重新将指针偏移后一位\r\n    + cur_pos大于0, 这时候要更新res的结果,就是和cur_pos比较大小\r\n    + cur_pos小于0, 负负得正,需要找到指针前面最大的负数,相除就变为最大\r\n\r\n```python\r\nclass Solution:\r\n    def maxProduct(self, nums: List[int]) -> int:\r\n        if not nums: return 0\r\n        # 目前的累乘\r\n        cur_pro = 1\r\n        # 前面最大的负数\r\n        max_neg = float(\"-inf\")\r\n        # 结果\r\n        res = float(\"-inf\")\r\n        for num in nums:\r\n            cur_pro *= num\r\n            # 考虑三种情况\r\n            # 大于0\r\n            if cur_pro > 0:\r\n                res = max(res, cur_pro)\r\n            # 小于0\r\n            elif cur_pro < 0:\r\n                if max_neg != float(\"-inf\"):\r\n                    res = max(res, cur_pro // max_neg)\r\n                else:\r\n                    res = max(res, num)\r\n                max_neg = max(max_neg, cur_pro)\r\n            # 等于0\r\n            else:\r\n                cur_pro = 1\r\n                max_neg = float(\"-inf\")\r\n                res = max(res, num)\r\n        return res\r\n```\r\n\r\n## 1.1 复杂度分析\r\n**时间复杂度:**遍历整个数组的时间复杂度为O(N)\r\n**空间复杂度:**没有用到额外的数据结构,所以空间复杂度为O(1)\r\n\r\n![3UYhwQ.png](https://s2.ax1x.com/2020/02/26/3UYhwQ.png)\r\n----\r\n# 2. 动态规划解决\r\n不难发现,每一个元素的乘积,最大值只可能在自身或者自身与上一次的累乘之中\r\n公式如下:\r\n>dp_max[i] = Math.max(nums[i-1],dp_max[i-1]*nums[i-1])\r\n\r\n因为存在负数,所以当这个元素为负数是,其最大乘积可能是与上一次最小乘积相乘\r\n所以不仅要定义一个变量存储最大当前的最大累乘,还要定义一个变量存储当前的最小累乘\r\n```python\r\nclass Solution:\r\n    def maxProduct(self, nums: List[int]) -> int:\r\n        if not nums: return 0\r\n        # 存储最后的结果\r\n        res = nums[0]\r\n        # 存储最大当前的最大累乘\r\n        res_max = nums[0]\r\n        # 存储当前的最小累乘\r\n        res_min = nums[0]\r\n        for num in nums[1:]:\r\n            cur_max = max(res_max*num, res_min*num, num)\r\n            cur_min = min(res_max*num, res_min*num, num)\r\n            res = max(res, cur_max)\r\n            res_max = cur_max\r\n            res_min = cur_min\r\n        return res\r\n```\r\n## 2.1 复杂度分析\r\n**时间复杂度:**遍历整个数组的时间复杂度为O(N)\r\n**空间复杂度:**没有用到额外的数据结构,所以空间复杂度为O(1)\r\n\r\n[![3Ud7sP.png](https://s2.ax1x.com/2020/02/26/3Ud7sP.png)](https://imgchr.com/i/3Ud7sP)','2020-03-04 18:25:55.046965','2020-03-04 18:25:55.046965',1,3),(16,'每日一道算法之--有效的括号','# 有效的括号\r\n**力扣第20题 :** <https://leetcode-cn.com/problems/valid-parentheses/>\r\n\r\n给定一个只包括 \'(\'，\')\'，\'{\'，\'}\'，\'[\'，\']\' 的字符串，判断字符串是否有效。\r\n\r\n有效字符串需满足：\r\n\r\n左括号必须用相同类型的右括号闭合。\r\n左括号必须以正确的顺序闭合。\r\n注意空字符串可被认为是有效字符串。\r\n\r\n示例 1:\r\n>输入: \"()\"\r\n输出: true\r\n\r\n示例 2:\r\n>输入: \"()[]{}\"\r\n输出: true\r\n\r\n示例 3:\r\n>输入: \"(]\"\r\n输出: false\r\n\r\n\r\n#### 题目分析\r\n题目不难理解,就是括号要一一对应,换句话来说,只要出现了右括号,name就必定有一个左括号与之对应,而且左括号和右括号必须是对称的,刚好栈这种数据结构可以很好地实现这一目的.\r\n\r\n+ 要想一一对应,字符串长度必须是偶数\r\n\r\n+ 遍历这个数组,每当遇到左括号时,直接入栈\r\n\r\n+ 当遇到有括号时,就取出栈顶元素,然后与该括号配对,若配对失败,则证明字符串无效,若配对成功,则继续遍历\r\n\r\n+ 直到数组遍历完成并且栈里没有元素以后,则证明字符串有效\r\n\r\n翻译成代码如下:\r\n\r\n```python\r\nclass Solution:\r\n    def isValid(self, s: str) -> bool:\r\n        has_map = {\')\':\'(\', \'}\':\'{\', \']\':\'[\'}\r\n        stack = []\r\n        if len(s) % 2 != 0: return False\r\n        for char in s:\r\n            if char in has_map:\r\n                top_ele = stack.pop() if stack else \'\'\r\n                if top_ele != has_map[char]: return False\r\n            else:\r\n                stack.append(char)\r\n        return not stack\r\n```\r\n\r\n### 复杂度分析\r\n**时间复杂度：**因为我们一次只遍历给定的字符串中的一个字符并在栈上进行 O(1) 的推入和弹出操作,所以时间复杂度为O(n)。\r\n\r\n**空间复杂度：**在最糟糕的情况下，我们最终要把所有括号推到栈上。例如 ((((((((((, 而如果是有效字符串,则也要将n/2的括号入栈,所以空间复杂度为O(n)。','2020-03-04 18:26:11.987980','2020-03-04 18:26:11.987980',1,3),(17,'每日一道算法之--链表反转','# 反转链表\r\n力扣第206题:<https://leetcode-cn.com/problems/reverse-linked-list/submissions/>\r\n\r\n反转一个单链表。\r\n\r\n示例:\r\n>输入: 1->2->3->4->5->NULL\r\n输出: 5->4->3->2->1->NULL\r\n\r\n进阶:\r\n你可以迭代或递归地反转链表。你能否用两种方法解决这道题？\r\n\r\n## 1.递归解决\r\n##### 1.1 创建新的节点\r\n一开始的时候我的想法是,既然是反转链表,那就可以创建一个新的节点来重新存储,然后直接递归到最后的节点,在不断地回溯中将新节点指向回溯的节点.\r\n```python\r\n# Definition for singly-linked list.\r\n# class ListNode:\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\nclass Solution:\r\n    new_node = ListNode(0)\r\n    n = new_node\r\n    def reverseList(self, head: ListNode) -> ListNode:\r\n        if not head:return head\r\n        def foo(head):\r\n            if not head.next: return head\r\n            node = foo(head.next)\r\n            if node:\r\n                self.n.next = ListNode(node.val)\r\n                self.n = self.n.next\r\n            return head\r\n        foo(head)\r\n        self.n.next = ListNode(head.val)\r\n        return self.new_node.next\r\n```\r\n\r\n在测试了几个例子都行的通,我就很兴奋的提交了,结果哦吼,提交时间超时......\r\n\r\n#### 1.2 在原链表处理\r\n我就在找原因,有可能是因为创建了新节点,处理时间太长,能不能不用新的节点,直接在原本的链表中去改变指针的指向,当获取到最后的节点时直接处理该节点\r\n\r\n+ 逐步递归,知道获取到最后的节点\r\n\r\n+ 递归回退的时候,一次改变节点的指针,使该节点的下下个指针指向自己,即node.next.next = node\r\n\r\n+ 注意的是,要将该节点的下一个指针删除,一开始我没注意,看了官方题解才知道\r\n\r\n```python\r\nclass Solution:\r\n    def reverseList(self, head: ListNode) -> ListNode:\r\n        if not head or not head.next: return head\r\n        node = self.reverseList(head.next)\r\n        head.next.next = head;\r\n        head.next = None;\r\n        return node\r\n```\r\n\r\n#### 1.3 复杂度分析\r\n\r\n**时间复杂度**：O(n)，假设 n 是列表的长度，要层层递归,那么时间复杂度为 O(n)。\r\n\r\n**空间复杂度：**O(n)，由于使用递归，将会使用隐式栈空间。递归深度可能会达到 nn 层。\r\n\r\n----\r\n\r\n## 2.迭代实现\r\n#### 1.1 用栈实现\r\n因为栈是先进先出的数据结构,所以先用栈存储每一个节点,然后在依次取出操作\r\n\r\n```python\r\nclass Solution:\r\n    def reverseList(self, head: ListNode) -> ListNode:\r\n        if not head or not head.next: return head\r\n        stack = []\r\n        while head:\r\n            stack.append(head)\r\n            head = head.next\r\n        n = stack.pop()\r\n        while stack:\r\n            node = stack.pop()\r\n            node.next.next = node\r\n            node.next = None\r\n        return n\r\n```\r\n#### 1.1.1 复杂度分析\r\n\r\n**时间复杂度:**假设列表长度为n, 进栈的时间复杂度为O(n),出栈的时间复杂度同样为O(n),所以时间复杂度为2*O(n) = O(n)\r\n\r\n**空间复杂度为:**运用了栈的数据结构,所以空间复杂度为O(n)\r\n可以看到效率还是不错的\r\n![3WYQZF.png](https://s2.ax1x.com/2020/03/02/3WYQZF.png)\r\n\r\n## 2.2 官方的双指针解法\r\n当我们要反转一个链表时,只需要改变每一个节点的前驱和后继指针\r\n\r\n```pythoh\r\nclass Solution:\r\n    def reverseList(self, head: ListNode) -> ListNode:\r\n        if not head: return None\r\n        prev = None\r\n        cur = head\r\n        while cur:\r\n            cur.next= prev\r\n            prev = cur\r\n            cur = cur.next\r\n        return prev\r\n```\r\n### 2.2.1 复杂度分析\r\n**时间复杂度:**O(n)\r\n\r\n**空间复杂度为:**O(n)','2020-03-04 18:26:28.465982','2020-03-04 18:26:28.465982',1,3),(18,'每日一道算法之--无重复的最长的子字符串','# 无重复的最长的子字符串\r\n力扣第3题:<https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/>\r\n\r\n![3ykYNt.png](https://s2.ax1x.com/2020/02/29/3ykYNt.png)\r\n## 1 暴力解决\r\n暴力方法就是将所有的肯恩列举出来,在会超过时间限制,这里就不列举了\r\n\r\n## 2 滑动窗口\r\n这道题是我第一道碰到的滑动窗口的题目,当时想了很久都想不出来,后来去看一一下别人的题解恍然大悟,**滑动窗口**确实是解决字符串问题的一非常好的方法\r\n\r\n+ 滑动窗口的顾名思义就是可以滑动的数据结构,遍历整个字符串,当滑动窗口里没有该字符时,就将该字符加进滑动窗口\r\n\r\n+ 当遇到有重复字符时,要将滑动窗口该字符前面的的字符(包括该字符)全部去除,然后在将该字符加进滑动窗口\r\n\r\n代码如下:\r\n```python\r\nclass Solution:\r\n    def lengthOfLongestSubstring(self, s: str) -> int:\r\n        # 集合可以保证唯一性\r\n        silde_win = set()\r\n        # 设置滑动窗口的值\r\n        left = 0\r\n        # 记录最长子串的长度\r\n        max_len = 0\r\n        # 记录当前的子串长度\r\n        cur_len = 0\r\n        for i in range(len(s)):\r\n            cur_len += 1\r\n            # 设置滑动窗口的值\r\n            while s[i] in silde_win:\r\n                silde_win.remove(s[left]) \r\n                left += 1\r\n                cur_len -= 1\r\n            silde_win.add(s[i])\r\n            max_len = max(max_len, cur_len)\r\n        return max_len\r\n```\r\n\r\n## 2.1 复杂度分析\r\n\r\n**时间复杂度:**遍历了一次数组,时间复杂度为$$0(N)$$, 但是每次滑动窗口的都有重复字符,如字符串为\'aaaaaaaaaaaaaaaaaaa\',会浪费没必要的时间,但是均摊时间复杂度依然为$$O(N)$$\r\n\r\n**空间复杂度:**用了集合,所以空间复杂度为$$O(N)$$\r\n\r\n![无重复最大子序_滑动1_.png](https://i.loli.net/2020/02/29/TjZEK2krRgbVWpn.png)\r\n\r\n## 滑动窗口的优化\r\n可以看到提交的成绩不是很理想,所以我一直在想着怎么优化,想到了几个优化方法\r\n\r\n+ 如果字符串有相邻的子串,直接忽视\r\n```python\r\nclass Solution:\r\n    def lengthOfLongestSubstring(self, s: str) -> int:\r\n        if not s :return 0\r\n        silde_win = set()\r\n        left = 0\r\n        max_len = 0\r\n        cur_len = 0\r\n        for i in range(len(s)):\r\n            # 如果字符串有相邻的子串,直接忽视\r\n            if i > 0 and s[i-1] == s[i]:\r\n                silde_win = set()\r\n                silde_win.add(s[i])\r\n                left = i\r\n                cur_len = 1\r\n                continue\r\n            cur_len += 1\r\n            # 设置滑动窗口的值\r\n            while s[i] in silde_win:\r\n                silde_win.remove(s[left]) \r\n                left += 1\r\n                cur_len -= 1\r\n            silde_win.add(s[i])\r\n            max_len = max(max_len, cur_len)\r\n        return max_len\r\n```\r\n\r\n![3y1Zs1.png](https://s2.ax1x.com/2020/02/29/3y1Zs1.png)\r\n\r\n可以发现成绩有了提升,但不是很明显\r\n\r\n+ 然后在看看我么你写的代码,silde_win这个数据结构其实是有很多操作的,话费了很多时间,换个思路想一想,我们能又能用更好地数据结构来代替这个集合呢,其实这个滑动窗口只是一个辅助的数据结构,只是用来暂时存储字符串的字串的,那为什么不直接用分片呢\r\n\r\n```python\r\nclass Solution:\r\n    def lengthOfLongestSubstring(self, s: str) -> int:\r\n        if not s :return 0\r\n        # 设置滑动窗口的值\r\n        left = 0\r\n        # 记录最长子串的长度\r\n        max_len = 0\r\n        # 记录当前的子串长度\r\n        cur_len = 0\r\n        for i in range(len(s)):\r\n            if i > 0 and s[i-1] == s[i]:\r\n                left = i\r\n                cur_len = 1\r\n                continue\r\n            cur_len += 1\r\n            # 设置滑动窗口的值\r\n            while s[i] in s[left:i]: \r\n                left += 1\r\n                cur_len -= 1\r\n            max_len = max(max_len, cur_len)\r\n        return max_len\r\n```\r\n\r\n[![3yJm1e.png](https://s2.ax1x.com/2020/02/29/3yJm1e.png)](https://imgchr.com/i/3yJm1e)\r\n\r\n只能优化到这种程度了,再去看看别人的题解拓展一下','2020-03-04 18:26:45.293118','2020-03-04 18:26:45.293118',1,3),(19,'每日一道算法之--股票问题总结','# 股票问题总结\r\n最近在leetcode刷题的时候发现了一个很好的解决股票问题的题解,所以收藏了这个链接,他主要运用了状态机的思想,从而非常有效的解决股票等dp问题\r\n\r\n## 文章如下:\r\n----\r\n\r\n>本文参考自英文版\r\nLeetCode：https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/discuss/108870/Most-consistent-ways-of-dealing-with-the-series-of-stock-problems\r\n\r\n很多读者抱怨股票系列问题奇技淫巧太多，如果面试真的遇到这类问题，基本不会想到那些巧妙的办法，怎么办？所以本文拒绝奇技淫巧，而是稳扎稳打，只用一种通用方法解决所用问题，以不变应万变。\r\n\r\n这篇文章用状态机的技巧来解决，可以全部提交通过。不要觉得这个名词高大上，文学词汇而已，实际上就是 DP table，看一眼就明白了。\r\n\r\n先随便抽出一道题，看看别人的解法：\r\n\r\n```java\r\nint maxProfit(vector<int>& prices) {\r\n    if(prices.empty()) return 0;\r\n    int s1=-prices[0],s2=INT_MIN,s3=INT_MIN,s4=INT_MIN;\r\n\r\n    for(int i=1;i<prices.size();++i) {\r\n        s1 = max(s1, -prices[i]);\r\n        s2 = max(s2, s1+prices[i]);\r\n        s3 = max(s3, s2-prices[i]);\r\n        s4 = max(s4, s3+prices[i]);\r\n    }\r\n    return max(0,s4);\r\n}\r\n```\r\n\r\n能看懂吧？会做了吗？不可能的，你看不懂，这才正常。就算你勉强看懂了，下一个问题你还是做不出来。为什么别人能写出这么诡异却又高效的解法呢？因为这类问题是有框架的，但是人家不会告诉你的，因为一旦告诉你，你五分钟就学会了，该算法题就不再神秘，变得不堪一击了。\r\n\r\n本文就来告诉你这个框架，然后带着你一道一道秒杀。\r\n\r\n这 6 道股票买卖问题是有共性的，我们通过对第四题（限制最大交易次数为 k）的分析一道一道解决。因为第四题是一个最泛化的形式，其他的问题都是这个形式的简化。\r\n\r\n第一题是只进行一次交易，相当于 k = 1；第二题是不限交易次数，相当于 k = +infinity（正无穷）；第三题是只进行 2 次交易，相当于 k = 2；剩下两道也是不限次数，但是加了交易「冷冻期」和「手续费」的额外条件，其实就是第二题的变种，都很容易处理。\r\n\r\n### 一、穷举框架\r\n首先，还是一样的思路：如何穷举？这里的穷举思路和上篇文章递归的思想不太一样。\r\n\r\n递归其实是符合我们思考的逻辑的，一步步推进，遇到无法解决的就丢给递归，一不小心就做出来了，可读性还很好。缺点就是一旦出错，你也不容易找到错误出现的原因。比如上篇文章的递归解法，肯定还有计算冗余，但确实不容易找到。\r\n\r\n而这里，我们不用递归思想进行穷举，而是利用「状态」进行穷举。我们具体到每一天，看看总共有几种可能的「状态」，再找出每个「状态」对应的「选择」。我们要穷举所有「状态」，穷举的目的是根据对应的「选择」更新状态。听起来抽象，你只要记住「状态」和「选择」两个词就行，下面实操一下就很容易明白了。\r\n\r\n```java\r\nfor 状态1 in 状态1的所有取值：\r\n    for 状态2 in 状态2的所有取值：\r\n        for ...\r\n            dp[状态1][状态2][...] = 择优(选择1，选择2...)\r\n```\r\n\r\n比如说这个问题，**每天都有三种「选择」**：买入、卖出、无操作，我们用 buy, sell, rest 表示这三种选择。但问题是，并不是每天都可以任意选择这三种选择的，因为 sell 必须在 buy 之后，buy 必须在 sell 之后。那么 rest 操作还应该分两种状态，一种是 buy 之后的 rest（持有了股票），一种是 sell 之后的 rest（没有持有股票）。而且别忘了，我们还有交易次数 k 的限制，就是说你 buy 还只能在 k > 0 的前提下操作。\r\n\r\n很复杂对吧，不要怕，我们现在的目的只是穷举，你有再多的状态，老夫要做的就是一把梭全部列举出来。**这个问题的「状态」有三个**，第一个是天数，第二个是允许交易的最大次数，第三个是当前的持有状态（即之前说的 rest 的状态，我们不妨用 1 表示持有，0 表示没有持有）。然后我们用一个三维数组就可以装下这几种状态的全部组合：\r\n\r\n```java\r\ndp[i][k][0 or 1]\r\n0 <= i <= n-1, 1 <= k <= K\r\nn 为天数，大 K 为最多交易数\r\n此问题共 n × K × 2 种状态，全部穷举就能搞定。\r\n\r\nfor 0 <= i < n:\r\n    for 1 <= k <= K:\r\n        for s in {0, 1}:\r\n            dp[i][k][s] = max(buy, sell, rest)\r\n```\r\n\r\n而且我们可以用自然语言描述出每一个状态的含义，比如说 `dp[3][2][1]` 的含义就是：今天是第三天，我现在手上持有着股票，至今最多进行 2 次交易。再比如 `dp[2][3][0]` 的含义：今天是第二天，我现在手上没有持有股票，至今最多进行 3 次交易。很容易理解，对吧？\r\n\r\n我们想求的最终答案是 `dp[n - 1][K][0]`，即最后一天，最多允许 K 次交易，最多获得多少利润。读者可能问为什么不是 dp[n - 1][K][1]？因为 [1] 代表手上还持有股票，[0] 表示手上的股票已经卖出去了，很显然后者得到的利润一定大于前者。\r\n\r\n记住如何解释「状态」，一旦你觉得哪里不好理解，把它翻译成自然语言就容易理解了。\r\n\r\n### 二、状态转移框架\r\n现在，我们完成了「状态」的穷举，我们开始思考每种「状态」有哪些「选择」，应该如何更新「状态」。只看「持有状态」，可以画个状态转移图。\r\n\r\n![](https://pic.leetcode-cn.com/c4eb5f0aa4daf7bef4b3b8af95129bb7394ec58e1ba7b191d9104bbd8ff1ccb3-40198bf2f6894018328b250b772b4a17724a983f99ba359b798a289733bffcbc-file_1559885188422-1.png)\r\n\r\n```java\r\n通过这个图可以很清楚地看到，每种状态（0 和 1）是如何转移而来的。根据这个图，我们来写一下状态转移方程：\r\n\r\ndp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])\r\n              max(   选择 rest  ,           选择 sell      )\r\n\r\n解释：今天我没有持有股票，有两种可能：\r\n要么是我昨天就没有持有，然后今天选择 rest，所以我今天还是没有持有；\r\n要么是我昨天持有股票，但是今天我 sell 了，所以我今天没有持有股票了。\r\n\r\ndp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])\r\n              max(   选择 rest  ,           选择 buy         )\r\n\r\n解释：今天我持有着股票，有两种可能：\r\n要么我昨天就持有着股票，然后今天选择 rest，所以我今天还持有着股票；\r\n要么我昨天本没有持有，但今天我选择 buy，所以今天我就持有股票了。\r\n```\r\n\r\n这个解释应该很清楚了，如果 buy，就要从利润中减去 prices[i]，如果 sell，就要给利润增加 prices[i]。今天的最大利润就是这两种可能选择中较大的那个。而且注意 k 的限制，我们在选择 buy 的时候，把 k 减小了 1，很好理解吧，当然你也可以在 sell 的时候减 1，一样的。\r\n\r\n现在，我们已经完成了动态规划中最困难的一步：状态转移方程。如果之前的内容你都可以理解，那么你已经可以秒杀所有问题了，只要套这个框架就行了。不过还差最后一点点，就是定义 base case，即最简单的情况。\r\n```java\r\ndp[-1][k][0] = 0\r\n解释：因为 i 是从 0 开始的，所以 i = -1 意味着还没有开始，这时候的利润当然是 0 。\r\ndp[-1][k][1] = -infinity\r\n解释：还没开始的时候，是不可能持有股票的，用负无穷表示这种不可能。\r\ndp[i][0][0] = 0\r\n解释：因为 k 是从 1 开始的，所以 k = 0 意味着根本不允许交易，这时候利润当然是 0 。\r\ndp[i][0][1] = -infinity\r\n解释：不允许交易的情况下，是不可能持有股票的，用负无穷表示这种不可能。\r\n```\r\n\r\n把上面的状态转移方程总结一下：\r\n\r\n```java\r\nbase case：\r\ndp[-1][k][0] = dp[i][0][0] = 0\r\ndp[-1][k][1] = dp[i][0][1] = -infinity\r\n\r\n状态转移方程：\r\ndp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])\r\ndp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])\r\n读者可能会问，这个数组索引是 -1 怎么编程表示出来呢，负无穷怎么表示呢？这都是细节问题，有很多方法实现。现在完整的框架已经完成，下面开始具体化。\r\n```\r\n\r\n### 三、秒杀题目\r\n#### 第一题，k = 1\r\n\r\n直接套状态转移方程，根据 base case，可以做一些化简：\r\n```java\r\ndp[i][1][0] = max(dp[i-1][1][0], dp[i-1][1][1] + prices[i])\r\ndp[i][1][1] = max(dp[i-1][1][1], dp[i-1][0][0] - prices[i]) \r\n            = max(dp[i-1][1][1], -prices[i])\r\n解释：k = 0 的 base case，所以 dp[i-1][0][0] = 0。\r\n\r\n现在发现 k 都是 1，不会改变，即 k 对状态转移已经没有影响了。\r\n可以进行进一步化简去掉所有 k：\r\ndp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])\r\ndp[i][1] = max(dp[i-1][1], -prices[i])\r\n```\r\n\r\n直接写出代码：\r\n```java\r\nint n = prices.length;\r\nint[][] dp = new int[n][2];\r\nfor (int i = 0; i < n; i++) {\r\n    dp[i][0] = Math.max(dp[i-1][0], dp[i-1][1] + prices[i]);\r\n    dp[i][1] = Math.max(dp[i-1][1], -prices[i]);\r\n}\r\nreturn dp[n - 1][0];\r\n```\r\n\r\n显然 i = 0 时 dp[i-1] 是不合法的。这是因为我们没有对 i 的 base case 进行处理。可以这样处理：\r\n\r\n```java\r\nfor (int i = 0; i < n; i++) {\r\n    if (i - 1 == -1) {\r\n        dp[i][0] = 0;\r\n        // 解释：\r\n        //   dp[i][0] \r\n        // = max(dp[-1][0], dp[-1][1] + prices[i])\r\n        // = max(0, -infinity + prices[i]) = 0\r\n        dp[i][1] = -prices[i];\r\n        //解释：\r\n        //   dp[i][1] \r\n        // = max(dp[-1][1], dp[-1][0] - prices[i])\r\n        // = max(-infinity, 0 - prices[i]) \r\n        // = -prices[i]\r\n        continue;\r\n    }\r\n    dp[i][0] = Math.max(dp[i-1][0], dp[i-1][1] + prices[i]);\r\n    dp[i][1] = Math.max(dp[i-1][1], -prices[i]);\r\n}\r\nreturn dp[n - 1][0];\r\n```\r\n第一题就解决了，但是这样处理 base case 很麻烦，而且注意一下状态转移方程，新状态只和相邻的一个状态有关，其实不用整个 dp 数组，只需要一个变量储存相邻的那个状态就足够了，这样可以把空间复杂度降到 O(1):\r\n\r\n```java\r\n// k == 1\r\nint maxProfit_k_1(int[] prices) {\r\n    int n = prices.length;\r\n    // base case: dp[-1][0] = 0, dp[-1][1] = -infinity\r\n    int dp_i_0 = 0, dp_i_1 = Integer.MIN_VALUE;\r\n    for (int i = 0; i < n; i++) {\r\n        // dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])\r\n        dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);\r\n        // dp[i][1] = max(dp[i-1][1], -prices[i])\r\n        dp_i_1 = Math.max(dp_i_1, -prices[i]);\r\n    }\r\n    return dp_i_0;\r\n}\r\n```\r\n\r\n两种方式都是一样的，不过这种编程方法简洁很多。但是如果没有前面状态转移方程的引导，是肯定看不懂的。后续的题目，我主要写这种空间复杂度 O(1) 的解法。\r\n\r\n#### 第二题，k = +infinity\r\n\r\n如果 k 为正无穷，那么就可以认为 k 和 k - 1 是一样的。可以这样改写框架：\r\n\r\n```java\r\ndp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])\r\ndp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])\r\n            = max(dp[i-1][k][1], dp[i-1][k][0] - prices[i])\r\n\r\n我们发现数组中的 k 已经不会改变了，也就是说不需要记录 k 这个状态了：\r\ndp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])\r\ndp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i])\r\n```\r\n\r\n直接翻译成代码：\r\n\r\n```java\r\nint maxProfit_k_inf(int[] prices) {\r\n    int n = prices.length;\r\n    int dp_i_0 = 0, dp_i_1 = Integer.MIN_VALUE;\r\n    for (int i = 0; i < n; i++) {\r\n        int temp = dp_i_0;\r\n        dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);\r\n        dp_i_1 = Math.max(dp_i_1, temp - prices[i]);\r\n    }\r\n    return dp_i_0;\r\n}\r\n```\r\n\r\n#### 第三题，k = +infinity with cooldown\r\n\r\n每次 sell 之后要等一天才能继续交易。只要把这个特点融入上一题的状态转移方程即可：\r\n\r\n```java\r\ndp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])\r\ndp[i][1] = max(dp[i-1][1], dp[i-2][0] - prices[i])\r\n解释：第 i 天选择 buy 的时候，要从 i-2 的状态转移，而不是 i-1 。\r\n翻译成代码：\r\n\r\nint maxProfit_with_cool(int[] prices) {\r\n    int n = prices.length;\r\n    int dp_i_0 = 0, dp_i_1 = Integer.MIN_VALUE;\r\n    int dp_pre_0 = 0; // 代表 dp[i-2][0]\r\n    for (int i = 0; i < n; i++) {\r\n        int temp = dp_i_0;\r\n        dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);\r\n        dp_i_1 = Math.max(dp_i_1, dp_pre_0 - prices[i]);\r\n        dp_pre_0 = temp;\r\n    }\r\n    return dp_i_0;\r\n}\r\n```\r\n\r\n#### 第四题，k = +infinity with fee\r\n\r\n每次交易要支付手续费，只要把手续费从利润中减去即可。改写方程：\r\n\r\n\r\n```java\r\ndp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])\r\ndp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i] - fee)\r\n解释：相当于买入股票的价格升高了。\r\n在第一个式子里减也是一样的，相当于卖出股票的价格减小了。\r\n直接翻译成代码：\r\n\r\nint maxProfit_with_fee(int[] prices, int fee) {\r\n    int n = prices.length;\r\n    int dp_i_0 = 0, dp_i_1 = Integer.MIN_VALUE;\r\n    for (int i = 0; i < n; i++) {\r\n        int temp = dp_i_0;\r\n        dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);\r\n        dp_i_1 = Math.max(dp_i_1, temp - prices[i] - fee);\r\n    }\r\n    return dp_i_0;\r\n}\r\n```\r\n\r\n#### 第五题，k = 2\r\n\r\nk = 2 和前面题目的情况稍微不同，因为上面的情况都和 k 的关系不太大。要么 k 是正无穷，状态转移和 k 没关系了；要么 k = 1，跟 k = 0 这个 base case 挨得近，最后也没有存在感。\r\n\r\n这道题 k = 2 和后面要讲的 k 是任意正整数的情况中，对 k 的处理就凸显出来了。我们直接写代码，边写边分析原因。\r\n\r\n原始的动态转移方程，没有可化简的地方\r\n\r\n```java\r\ndp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])\r\ndp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])\r\n```\r\n\r\n按照之前的代码，我们可能想当然这样写代码（错误的）：\r\n\r\n```java\r\nint k = 2;\r\nint[][][] dp = new int[n][k + 1][2];\r\nfor (int i = 0; i < n; i++)\r\n    if (i - 1 == -1) { /* 处理一下 base case*/ }\r\n    dp[i][k][0] = Math.max(dp[i-1][k][0], dp[i-1][k][1] + prices[i]);\r\n    dp[i][k][1] = Math.max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i]);\r\n}\r\nreturn dp[n - 1][k][0];\r\n```\r\n\r\n为什么错误？我这不是照着状态转移方程写的吗？\r\n\r\n还记得前面总结的「穷举框架」吗？就是说我们必须穷举所有状态。其实我们之前的解法，都在穷举所有状态，只是之前的题目中 k 都被化简掉了。这道题由于没有消掉 k 的影响，所以必须要对 k 进行穷举：\r\n\r\n```java\r\nint max_k = 2;\r\nint[][][] dp = new int[n][max_k + 1][2];\r\nfor (int i = 0; i < n; i++) {\r\n    for (int k = max_k; k >= 1; k--) {\r\n        if (i - 1 == -1) { \r\n            /* 处理 base case */\r\n            dp[i][k][0] = 0;\r\n            dp[i][k][1] = -prices[i];\r\n            continue;\r\n        }\r\n        dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i]);\r\n        dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i]);\r\n    }\r\n}\r\n// 穷举了 n × max_k × 2 个状态，正确。\r\nreturn dp[n - 1][max_k][0];\r\n```\r\n\r\n如果你不理解，可以返回第一点「穷举框架」重新阅读体会一下。\r\n\r\n这里 k 取值范围比较小，所以可以不用 for 循环，直接把 k = 1 和 2 的情况手动列举出来也可以：\r\n\r\n```java\r\ndp[i][2][0] = max(dp[i-1][2][0], dp[i-1][2][1] + prices[i])\r\ndp[i][2][1] = max(dp[i-1][2][1], dp[i-1][1][0] - prices[i])\r\ndp[i][1][0] = max(dp[i-1][1][0], dp[i-1][1][1] + prices[i])\r\ndp[i][1][1] = max(dp[i-1][1][1], -prices[i])\r\n\r\nint maxProfit_k_2(int[] prices) {\r\n    int dp_i10 = 0, dp_i11 = Integer.MIN_VALUE;\r\n    int dp_i20 = 0, dp_i21 = Integer.MIN_VALUE;\r\n    for (int price : prices) {\r\n        dp_i20 = Math.max(dp_i20, dp_i21 + price);\r\n        dp_i21 = Math.max(dp_i21, dp_i10 - price);\r\n        dp_i10 = Math.max(dp_i10, dp_i11 + price);\r\n        dp_i11 = Math.max(dp_i11, -price);\r\n    }\r\n    return dp_i20;\r\n}\r\n```\r\n\r\n有状态转移方程和含义明确的变量名指导，相信你很容易看懂。其实我们可以故弄玄虚，把上述四个变量换成 a, b, c, d。这样当别人看到你的代码时就会一头雾水，大惊失色，不得不对你肃然起敬。\r\n\r\n#### 第六题，k = any integer\r\n\r\n有了上一题 k = 2 的铺垫，这题应该和上一题的第一个解法没啥区别。但是出现了一个超内存的错误，原来是传入的 k 值会非常大，dp 数组太大了。现在想想，交易次数 k 最多有多大呢？\r\n\r\n一次交易由买入和卖出构成，至少需要两天。所以说有效的限制 k 应该不超过 n/2，如果超过，就没有约束作用了，相当于 k = +infinity。这种情况是之前解决过的。\r\n\r\n直接把之前的代码重用：\r\n\r\n```java\r\nint maxProfit_k_any(int max_k, int[] prices) {\r\n    int n = prices.length;\r\n    if (max_k > n / 2) \r\n        return maxProfit_k_inf(prices);\r\n\r\n    int[][][] dp = new int[n][max_k + 1][2];\r\n    for (int i = 0; i < n; i++) \r\n        for (int k = max_k; k >= 1; k--) {\r\n            if (i - 1 == -1) { \r\n                /* 处理 base case */\r\n                dp[i][k][0] = 0;\r\n                dp[i][k][1] = -prices[i];\r\n                continue;\r\n            }\r\n            dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i]);\r\n            dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i]);     \r\n        }\r\n    return dp[n - 1][max_k][0];\r\n}\r\n```\r\n\r\n至此，6 道题目通过一个状态转移方程全部解决。\r\n\r\n### 四、最后总结\r\n本文给大家讲了如何通过状态转移的方法解决复杂的问题，用一个状态转移方程秒杀了 6 道股票买卖问题，现在想想，其实也不算难对吧？这已经属于动态规划问题中较困难的了。\r\n\r\n关键就在于列举出所有可能的「状态」，然后想想怎么穷举更新这些「状态」。一般用一个多维 dp 数组储存这些状态，从 base case 开始向后推进，推进到最后的状态，就是我们想要的答案。想想这个过程，你是不是有点理解「动态规划」这个名词的意义了呢？\r\n\r\n具体到股票买卖问题，我们发现了三个状态，使用了一个三维数组，无非还是穷举 + 更新，不过我们可以说的高大上一点，这叫「三维 DP」，怕不怕？这个大实话一说，立刻显得你高人一等，名利双收有没有。\r\n\r\n所以，大家不要被各种高大上的名词吓到，再多的困难问题，奇技淫巧，也不过是基本套路的不断升级组合产生的。只要把住算法的底层原理，即可举一反三，逐个击破。\r\n\r\n[买卖股票的最佳时机](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/solution/)\r\n\r\n[买卖股票的最佳时机 II](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/)\r\n\r\n[买卖股票的最佳时机 III](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/)\r\n\r\n[买卖股票的最佳时机 IV](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv/)\r\n\r\n[最佳买卖股票时机含冷冻期](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/)\r\n\r\n[买卖股票的最佳时机含手续费](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/)\r\n\r\n作者：labuladong\r\n链接：https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/solution/yi-ge-fang-fa-tuan-mie-6-dao-gu-piao-wen-ti-by-l-3/\r\n来源：力扣（LeetCode）\r\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。','2020-03-04 18:27:04.467486','2020-03-04 18:27:04.467486',1,3),(20,'python与其他语言的对比','# python与其他语言的对比\r\n### 1.C语言\r\n    它既有高级语言的特点，又具有汇编语言的特点，它是结构式语言。C语言应用指针：可以直接进行靠近硬件的操作，但是C的指针操作不做保护，也给它带来了很多不安全的因素。C++在这方面做了改进，在保留了指针操作的同时又增强了安全性，受到了一些用户的支持，但是，由于这些改进增加语言的复杂度，也为另一部分所诟病。Java则吸取了C++的教训，取消了指针操作，也取消了C++改进中一些备受争议的地方，在安全性和适合性方面均取得良好的效果，但其本身解释在虚拟机中运行，运行效率低于C++/C。一般而言，C，C++，java被视为同一系的语言，它们长期占据着程序使用榜的前三名。\r\n    C语言的优点：简洁紧凑、灵活方便；运算符丰富；数据类型丰富；表达方式灵活实用；允许直接访问物理地址，对硬件进行操作；生成目标代码质量高，程序执行效率高；可移植性好；表达力强；\r\n    C语言的缺点：C语言的缺点主要表现在数据的封装性上，这一点使得C在数据的安全性上有很大缺陷，这也是C和C++的一大区别。 C语言的语法限制不太严格，对变量的类型约束不严格，影响程序的安全性，对数组下标越界不作检查等。从应用的角度，C语言比其他高级语言较难掌握。也就是说，对用C语言的人，要求对程序设计更熟练一些。\r\n\r\n### 2.c++语言\r\n    C++是C语言的继承，它既可以进行C语言的过程化程序设计，又可以进行以抽象数据类型为特点的基于对象的程序设计，还可以进行以继承和多态为特点的面向对象的程序设计。C++擅长面向对象程序设计的同时，还可以进行基于过程的程序设计，因而C++就适应的问题规模而论，大小由之。 \r\n    C++不仅拥有计算机高效运行的实用性特征，同时还致力于提高大规模程序的编程质量与程序设计语言的问题描述能力。\r\n    C++语言的程序因为要体现高性能，所以都是编译型的。但其开发环境，为了方便测试，将调试环境做成解释型的。即开发过程中，以解释型的逐条语句执行方式来进行调试，以编译型的脱离开发环境而启动运行的方式来生成程序最终的执行代码。\r\n    生成程序是指将源码（C++语句）转换成一个可以运行的应用程序的过程。如果程序的编写是正确的，那么通常只需按一个功能键，即可搞定这个过程。该过程实际上分成两个步骤。\r\n    第一步是对程序进行编译，这需要用到编译器（compiler）。编译器将C++语句转换成机器码(也称为目标码)；如果这个步骤成功，下一步就是对程序进行链接，这需要用到链接器（linker）。链接器将编译获得机器码与C++库中的代码进行合并。C++库包含了执行某些常见任务的函数（“函数”是子程序的另一种称呼）。例如，一个C++库中包含标准的平方根函数sqrt，所以不必亲自计算平方根。C++库中还包含一些子程序，它们把数据发送到显示器，并知道如何读写硬盘上的数据文件。\r\n\r\n### 3. C#语言\r\n    C#是微软公司发布的一种面向对象的、运行于.NET Framework之上的高级程序设计语言。C#看起来与Java有着惊人的相似；它包括了诸如单一继承、接口、与Java几乎同样的语法和编译成中间代码再运行的过程。但是C#与Java有着明显的不同，它借鉴了Delphi的一个特点，与COM（组件对象模型）是直接集成的，而且它是微软公司 .NET windows网络框架的主角。首先，C# 和JAVA一样，简直就是照搬了C++的部分语法，因此，对于数量众多的C++程序员学习起来很容易上手，另外，对于新手来说，比C++要简单一些。其次，Windows是占垄断地位的平台，而开发Windows应用，当然微软的声音是不能忽略的。最重要的是，相对于C++，用C# 开发应用软件可以大大缩短开发周期，同时可以利用原来除用户界面代码之外的C++代码。\r\n\r\n\r\n### 4. Java语言\r\n    Java是一种可以撰写跨平台应用软件的面向对象的程序设计语言，是由Sun Microsystems公司于1995年5月推出的Java程序设计语言和Java平台（即JavaSE, JavaEE, JavaME）的总称。Java 技术具有卓越的通用性、高效性、平台移植性和安全性，广泛应用于个人PC、数据中心、游戏控制台、科学超级计算机、移动电话和互联网，同时拥有全球最大的开发者专业社群。在全球云计算和移动互联网的产业环境下，Java更具备了显著优势和广阔前景。\r\n    Java的优势，与传统程序不同，Sun 公司在推出 Java 之际就将其作为一种开放的技术。全球数以万计的 Java 开发公司被要求所设计的 Java软件必须相互兼容。“Java 语言靠群体的力量而非公司的力量”是Sun公司的口号之一，并获得了广大软件开发商的认同。这与微软公司所倡导的注重精英和封闭式的模式完全不同。Sun 公司对 Java 编程语言的解释是：Java 编程语言是个简单、面向对象、分布式、解释性、健壮、安全与系统无关、可移植、高性能、多线程和动态的语言。\r\n\r\n\r\n### 5.php语言\r\n    PHP（PHP: Hypertext Preprocessor的缩写，中文名：“PHP：超文本预处理器”）是一种通用开源脚本语言。语法吸收了C语言、Java和Perl的特点，入门门槛较低，易于学习，使用广泛，主要适用于Web开发领域。\r\n     特性：PHP 独特的语法混合了 C、Java、Perl 以及 PHP 自创新的语法；PHP可以比CGI或者Perl更快速的执行动态网页——动态页面方面，与其他的编程语言相比，PHP是将程序嵌入到HTML文档中去执行，执行效率比完全生成htmL标记的CGI要高许多，PHP具有非常强大的功能，所有的CGI的功能PHP都能实现； PHP支持几乎所有流行的数据库以及操作系统；最重要的是PHP可以用C、C++进行程序的扩展。\r\n\r\n\r\n### 6.python语言\r\n    python是一种面向对象、直译式计算机程序设计语言，Python语法简洁而清晰，具有丰富和强大的类库。它常被昵称为胶水语言，它能够很轻松的把用其他语言制作的各种模块（尤其是C/C++）轻松地联结在一起。常见的一种应用情形是，使用python快速生成程序的原型（有时甚至是程序的最终界面），然后对其中有特别要求的部分，用更合适的语言改写。\r\n    Python是完全面向对象的语言。函数、模块、数字、字符串都是对象。并且完全支持继承、重载、派生、多继承，有益于增强源代码的复用性。Python支持重载运算符和动态类型。相对于Lisp这种传统的函数式编程语言，Python对函数式设计只提供了有限的支持。有两个标准库(functools, itertools)提供了Haskell和Standard ML中久经考验的函数式程序设计工具。Python本身被设计为可扩充的。并非所有的特性和功能都集成到语言核心。Python提供了丰富的API和工具，以便程序员能够轻松地使用C语言、C++、Cython来编写扩充模块。Python编译器本身也可以被集成到其它需要脚本语言的程序内。因此，很多人还把Python作为一种“胶水语言”（glue language）使用。使用Python将其他语言编写的程序进行集成和封装。\r\n\r\n----\r\n\r\n# 编译型语言和解释型语言\r\n\r\n+ 编译性语言(需要编译器,相当于翻译)\r\n\r\n    +  只须编译一次就可以把源代码编译成机器语言，后面的执行无须重新编译，直接使用之前的编译结果就可  以；因此其执行的效率比较高；\r\n    + 编译性语言代表：C、C++、Pascal/Object Pascal（Delphi）；\r\n    + 程序执行效率比较高，但比较依赖编译器，调试麻烦, 因此跨平台性差一些；\r\n>不同平台对编译器影响较大。\r\n如：\r\n（1）16位系统下int是2个字节（16位），而32位系统下int占4个字节（32位）；\r\n（2）32位系统下long类型占4字节，而64位系统下long类型占8个字节；\r\n\r\n+ 解释型语言（需要解释器，相当于同声传译）\r\n\r\n  + 源代码不能直接翻译成机器语言，而是先翻译成中间代码，再由解释器对中间代码进行解释运行；\r\n  + 程序不需要编译，程序在运行时才翻译成机器语言，每执行一次都要翻译一次；\r\n  + 解释型跨平台好，一份代码，到处使用\r\n  + 解释性语言代表：Python、JavaScript、Shell、Ruby、MATLAB等；\r\n  + 运行效率一般相对比较低，依赖解释器，跨平台性好；\r\n\r\n![1-1912311J415L7.gif](https://i.loli.net/2020/03/04/WsBjtcEQZlTM9SP.gif)\r\n\r\n----\r\n\r\n# python解释器的种类和特点\r\n\r\n\r\n## CPython\r\n\r\nCPython是使用最广且被的Python解释器。本教程以CPython为准。当我们从Python官方网站下载并安装好Python 2.7后，我们就直接获得了一个官方版本的解释器：CPython。这个解释器是用C语言开发的，所以叫CPython。在命令行下运行python就是启动CPython解释器。\r\n\r\n## IPython\r\n\r\nIPython是基于CPython之上的一个交互式解释器，也就是说，IPython只是在交互方式上有所增强，但是执行Python代码的功能和CPython是完全一样的。好比很多国产浏览器虽然外观不同，但内核其实都是调用了IE。CPython用>>>作为提示符，而IPython用In [序号]:作为提示符。\r\n\r\n## PyPy\r\n\r\nPyPy是另一个Python解释器，它的目标是执行速度。PyPy采用JIT技术，对Python代码进行动态编译（注意不是解释），所以可以显著提高Python代码的执行速度。\r\n\r\n绝大部分Python代码都可以在PyPy下运行，但是PyPy和CPython有一些是不同的，这就导致相同的Python代码在两种解释器下执行可能会有不同的结果。如果你的代码要放到PyPy下执行，就需要了解PyPy和CPython的不同点。\r\n\r\n## Jython\r\n\r\nJython是运行在Java平台上的Python解释器，可以直接把Python代码编译成Java字节码执行。\r\n\r\n## IronPython\r\n\r\nIronPython和Jython类似，只不过IronPython是运行在微软.Net平台上的Python解释器，可以直接把Python代码编译成.Net的字节码。','2020-03-04 18:27:31.576944','2020-03-04 18:27:31.576944',1,4),(21,'python单例模式的实现','# 单例模式\r\n\r\n## 什么是单例模式\r\n>单例模式（Singleton Pattern）是一种常用的软件设计模式，该模式的主要目的是确保某一个类只有一个实例存在。当你希望在整个系统中，某个类只能出现一个实例时，单例对象就能派上用场。\r\n\r\n>比如，某个服务器程序的配置信息存放在一个文件中，客户端通过一个 AppConfig 的类来读取配置文件的信息。如果在程序运行期间，有很多地方都需要使用配置文件的内容，也就是说，很多地方都需要创建 AppConfig 对象的实例，这就导致系统中存在多个 AppConfig 的实例对象，而这样会严重浪费内存资源，尤其是在配置文件内容很多的情况下。事实上，类似 AppConfig 这样的类，我们希望在程序运行期间只存在一个实例对象。\r\n\r\n## 单例模式的实现\r\npython实现单例模式有多种实现方法，下面一一来解释说明\r\n\r\n### 1. 基于装饰器的单例模式的实现\r\n\r\n```python\r\ndef singleton(cls):\r\n    # 创建一个字典用来保存类的实例对象\r\n    _instance = {}\r\n\r\n    def _singleton(*args, **kwargs):\r\n        # 先判断这个类有没有对象\r\n        if cls not in _instance:\r\n            _instance[cls] = cls(*args, **kwargs)  # 创建一个对象,并保存到字典当中\r\n        # 将实例对象返回\r\n        return _instance[cls]\r\n\r\n    return _singleton\r\n\r\n@singleton\r\nclass A(object):\r\n    a = 1\r\n\r\n    def __init__(self, x=0):\r\n        self.x = x\r\n        print(\'这是A的类的初始化方法\')\r\n\r\na1 = A(2)\r\na2 = A(3)\r\nprint(a1.x, a2.x)\r\nprint(id(a1), id(a2))\r\n```\r\n可以看到打印结果为:\r\n\r\n![3IYk1H.png](https://s2.ax1x.com/2020/03/04/3IYk1H.png)\r\n\r\n### 2. 基于类方法的单例模式的实现\r\n\r\n```python\r\nclass A:\r\n\r\n    def __init__(self, x, y):\r\n        self.x = x\r\n        self.y = y\r\n\r\n    @classmethod\r\n    def singleton(cls, *args, **kwargs):\r\n        if not hasattr(cls, \'__instance\'):\r\n            cls.__instance = cls(*args, **kwargs)\r\n        return cls.__instance\r\n\r\n\r\nobj1 = A(1, 2)\r\nobj2 = A(3, 4)\r\nprint(obj1.x, obj1.y, obj2.x, obj2.y)\r\nprint(id(obj1), id(obj2))\r\nobj3 = A.singleton(1, 2)\r\nobj4 = A.singleton(3, 4)\r\nprint(obj3.x, obj3.y, obj4.x, obj4.y)\r\nprint(id(obj3), id(obj4)\r\n```\r\n打印结果如下:\r\n\r\n![3IaYzF.png](https://s2.ax1x.com/2020/03/04/3IaYzF.png)\r\n\r\n#### 但是这个实现方法在多线程上会出现堵塞现象,所以需要加锁\r\n```python\r\nimport threading\r\n\r\n\r\nclass A:\r\n    _instance_lock = threading.Lock()\r\n\r\n    def __init__(self, x, y):\r\n        self.x = x\r\n        self.y = y\r\n\r\n    @classmethod\r\n    def singleton(cls, *args, **kwargs):\r\n        if not hasattr(cls, \'__instance\'):\r\n            with cls._instance_lock:\r\n                cls.__instance = cls(*args, **kwargs)\r\n        return cls.__instance\r\n\r\n\r\nobj1 = A(1, 2)\r\nobj2 = A(3, 4)\r\nprint(obj1.x, obj1.y, obj2.x, obj2.y)\r\nprint(id(obj1), id(obj2))\r\nobj3 = A.singleton(1, 2)\r\nobj4 = A.singleton(3, 4)\r\nprint(obj3.x, obj3.y, obj4.x, obj4.y)\r\nprint(id(obj3), id(obj4))\r\n```\r\n**可以发现,使用类方法创建单例模式时,必须要调用该方法,否则直接调用类得到的并不是单例**\r\n\r\n### 3. 基于__new__方法实现单例模式(推荐)\r\n\r\n+  一个对象的实例化过程是先执行类的__new__方法,如果我们没有写,默认会调用object的__new__方法,返回一个实例化对象,然后再调用__init__方法,对这个对象进行初始化,我们可以根据这个实现单例.\r\n\r\n+ 在一个类的__new__方法中先判断是不是存在实例,如果存在实例,就直接返回,如果不存在实例就创建.\r\n\r\n```python\r\nimport threading\r\n\r\nclass A:\r\n    _instance_lock = threading.Lock()\r\n\r\n    def __new__(cls, *args, **kwargs):\r\n        if not hasattr(cls, \'__instance\'):\r\n            with cls._instance_lock:\r\n                if not hasattr(cls, \'__instance\'):\r\n                    cls.__instance = super().__new__(cls)\r\n        return cls.__instance\r\n\r\n\r\nobj1 = A()\r\nobj2 = A()\r\nprint(obj1, obj2)\r\nprint(id(obj1), id(obj2))\r\n\r\n```\r\n### 45.基于metaclass方式实现\r\n\r\n1. 类由type创建，创建类时，type的__init__方法自动执行，类() 执行type的 __call__方法(类的__new__方法,类的__init__方法)\r\n\r\n2. 对象由类创建，创建对象时，类的__init__方法自动执行，对象()执行类的 __call__ 方法\r\n\r\n```python\r\nclass Foo:\r\n    def __init__(self):\r\n        pass\r\n\r\n    def __call__(self, *args, **kwargs):\r\n        pass\r\n\r\nobj = Foo()\r\n# 执行type的 __call__ 方法，调用 Foo类（是type的对象）的 __new__方法，用于创建对象，然后调用 Foo类（是type的对象）的 __init__方法，用于对对象初始化。\r\n\r\nobj()    # 执行Foo的 __call__ 方法\r\n```\r\n**元类的使用**\r\n```python\r\nclass SingletonType(type):\r\n    #只有继承了type类才能称之为一个元类，否则就是一个普通的自定义类\r\n    def __init__(self,*args,**kwargs):\r\n        super(SingletonType,self).__init__(*args,**kwargs)\r\n\r\n    def __call__(cls, *args, **kwargs): # 这里的cls，即Foo类\r\n        print(\'cls\',cls)\r\n        # __new__()创建对象\r\n        obj = cls.__new__(cls,*args, **kwargs)\r\n        # __init__()实例化对象\r\n        cls.__init__(obj,*args, **kwargs) # Foo.__init__(obj)\r\n        return obj\r\n\r\nclass Foo(metaclass=SingletonType): # 指定创建Foo的type为SingletonType\r\n    def __init__(self，name):\r\n        self.name = name\r\n    def __new__(cls, *args, **kwargs):\r\n        return object.__new__(cls)\r\n\r\nobj = Foo(\'xx\')\r\n```\r\n\r\n\r\n**实现单例模式**\r\n```python\r\n\r\nimport threading\r\n\r\nclass SingletonType(type):\r\n    _instance_lock = threading.Lock()\r\n    def __call__(cls, *args, **kwargs):\r\n        if not hasattr(cls, \"_instance\"):\r\n            with SingletonType._instance_lock:\r\n                if not hasattr(cls, \"_instance\"):\r\n                    cls._instance = super(SingletonType,cls).__call__(*args, **kwargs)\r\n        return cls._instance\r\n\r\nclass Foo(metaclass=SingletonType):\r\n    def __init__(self,name):\r\n        self.name = name\r\n\r\n\r\nobj1 = Foo(\'name\')\r\nobj2 = Foo(\'name\')\r\nprint(obj1,obj2)\r\n```','2020-03-04 18:28:02.492123','2020-03-04 18:28:02.492123',1,4),(22,'python的垃圾回收机制','# python的垃圾回收机制\r\n\r\n>垃圾回收机制是自动帮助我们管理内存，清理垃圾的一种工具\r\n1）、**引用计数**\r\n当一个对象的引用被创建或者复制时，对象的引用计数加1；\r\n当一个对象的引用被销毁时，对象的引用计数减1；\r\n当对象的引用计数减少为0时，就意味着对象已经没有被任何人使用了，可以将其所占用的内存释放了。\r\n2）、**标记-清除**\r\n标记-清除不改动真实的引用计数，而是将集合中对象的引用计数复制一份副本，改动该对象引用的副本。\r\n对于副本做任何的改动，都不会影响到对象生命走起的维护。\r\n3）、**分代回收**\r\n将系统中的所有内存块根据其存活时间划分为不同的集合，每一个集合就成为一个“代”，垃圾收集的频率随着“代”的存活时间的增大而减小。\r\n也就是说，活得越长的对象，就越不可能是垃圾，就应该减少对它的垃圾收集频率。\r\n那么如何来衡量这个存活时间：通常是利用几次垃圾收集动作来衡量，如果一个对象经过的垃圾收集次数越多，可以得出：该对象存活时间就越长。\r\n\r\n## 1. 引用计数\r\n**python一切皆对象,每一个对象都保存了一个称为引用计数的整数值，来追踪到底有多少引用指向了这个对象。无论何时，如果我们程序中的一个变量或其他对象引用了目标对象，Python将会增加这个计数值。**\r\n\r\n1. 对象被创建  a=14\r\n2. 对象被引用  b=a\r\n3. 对象被作为参数,传到函数中   func(a)\r\n4. 对象作为一个元素，存储在容器中   List={a,”a”,”b”,2}\r\n\r\n**而当程序停止使用这个对象，则Python会减少这个计数值。一旦计数值被减到零，Python将会释放这个对象以及回收相关内存空间。**\r\n\r\n1. 当该对象的别名被显式销毁时  del a\r\n2. 当该对象的引别名被赋予新的对象，   a=26\r\n3. 一个对象离开它的作用域，例如 func函数执行完毕时，函数里面的局部变量的引用计数器就会减一（但是全局变量不会）\r\n4. 将该元素从容器中删除时，或者容器被销毁时。\r\n\r\n**当指向该对象的内存的引用计数器为0的时候，该内存将会被Python虚拟机销毁**\r\n\r\n#### 1.1 引用计数的优点\r\n可以看出,引用计数有以下几个优点:\r\n\r\n+ 高效\r\n+ 运行期没有停顿 可以类比一下Ruby的垃圾回收机制，也就是 **实时性**：一旦没有引用，内存就直接释放了。不用像其他机制等到特定时机。实时性还带来一个好处：处理回收内存的时间分摊到了平时。\r\n+ 对象有确定的生命周期\r\n+ 易于实现,简单直观\r\n\r\n但是针对引用计数这种算法来说，如果一个数据结构引用了它自身，即如果这个数据结构是一个循环数据结构，那么某些引用计数值是肯定无法变成零的。为了更好地理解这个问题，让我们举个例子。\r\n\r\n```python\r\na = { } #对象A的引用计数为 1\r\nb = { } #对象B的引用计数为 1\r\na[\'b\'] = b  #B的引用计数增1\r\nb[\'a\'] = a  #A的引用计数增1\r\ndel a #A的引用减 1，最后A对象的引用为 1\r\ndel b #B的引用减 1, 最后B对象的引用为 1\r\n```\r\n\r\n![3Ip8O0.png](https://s2.ax1x.com/2020/03/04/3Ip8O0.png)\r\n\r\n在这个例子中程序执行完del语句后，A、B对象已经没有任何引用指向这两个对象，但是这两个对象各包含一个对方对象的引用，虽然最后两个对象都无法通过其它变量来引用这两个对象了，这对GC来说就是两个非活动对象或者说是垃圾对象，但是他们的引用计数并没有减少到零。因此如果是使用引用计数法来管理这两对象的话，他们并不会被回收，它会一直驻留在内存中，就会造成了内存泄漏（内存空间在使用完毕后未释放）。\r\n\r\n\r\n#### 1.2 引用计数的缺点\r\n虽然引用计数有着非常简单高效的优点,但是他也有这致命的缺点\r\n\r\n+ 维护引用计数消耗资源，维护引用计数的次数和引用赋值成正比，而不像mark and sweep等基本与回收的内存数量有关。\r\n\r\n+ 无法解决循环引用的问题\r\n\r\n为了解决对象的循环引用问题，Python引入了标记-清除和分代回收两种GC机制。\r\n\r\n----\r\n\r\n## 2. 标记清除\r\n\r\n>『标记清除（Mark—Sweep）』算法是一种基于追踪回收（tracing GC）技术实现的垃圾回收算法。它分为两个阶段：第一阶段是标记阶段，GC会把所有的『活动对象』打上标记，第二阶段是把那些没有标记的对象『非活动对象』进行回收。那么GC又是如何判断哪些是活动对象哪些是非活动对象的呢？\r\n\r\n>对象之间通过引用（指针）连在一起，构成一个有向图，对象构成这个有向图的节点，而引用关系构成这个有向图的边。从根对象（root object）出发，沿着有向边遍历对象，可达的（reachable）对象标记为活动对象，不可达的对象就是要被清除的非活动对象。根对象就是全局变量、调用栈、寄存器。\r\n\r\nA）标记阶段，遍历所有的对象，如果是可达的（reachable），也就是还有对象引用它，那么就标记该对象为可达；\r\n\r\nB）清除阶段，再次遍历对象，如果发现某个对象没有标记为可达，则就将其回收。\r\n\r\n![](https://foofish.net/images/mark-sweep.svg)\r\n>在上图中，我们把小黑圈视为全局变量，也就是把它作为root object，从小黑圈出发，对象1可直达，那么它将被标记，对象2、3可间接到达也会被标记，而4和5不可达，那么1、2、3就是活动对象，4和5是非活动对象会被GC回收。\r\n\r\n>标记清除算法作为Python的辅助垃圾收集技术主要处理的是一些容器对象，比如list、dict、tuple，instance等，因为对于字符串、数值对象是不可能造成循环引用问题。Python使用一个双向链表将这些容器对象组织起来。\r\n\r\n不过，这种简单粗暴的标记清除算法也有明显的缺点：**清除非活动的对象前它必须顺序扫描整个堆内存，哪怕只剩下小部分活动对象也要扫描所有对象**，而且会暂停整个应用程序，等待标记清除结束后才会恢复应用程序的运行\r\n\r\n----\r\n\r\n## 3. 分代回收\r\n\r\n分代回收是一种以空间换时间的操作方式，Python将内存根据对象的存活时间划分为不同的集合，每个集合称为一个代，**Python将内存分为了3“代”，分别为年轻代（第0代）、中年代（第1代）、老年代（第2代），他们对应的是3个链表，它们的垃圾收集频率与对象的存活时间的增大而减小**。新创建的对象都会分配在年轻代，年轻代链表的总数达到上限时，Python垃圾收集机制就会被触发，把那些可以被回收的对象回收掉，而那些不会回收的对象就会被移到中年代去，依此类推，老年代中的对象是存活时间最久的对象，甚至是存活于整个系统的生命周期内。同时，分代回收是建立在标记清除技术基础之上。分代回收同样作为Python的辅助垃圾收集技术处理那些容器对象。\r\n\r\n分代回收是基于这样的一个统计事实，**对于程序，存在一定比例的内存块的生存周期比较短；而剩下的内存块，生存周期会比较长，甚至会从程序开始一直持续到程序结束。生存期较短对象的比例通常在 80%～90% 之间，这种思想简单点说就是：对象存在时间越长，越可能不是垃圾，应该越少去收集。这样在执行标记-清除算法时可以有效减小遍历的对象数，从而提高垃圾回收的速度。**\r\n\r\n#### Python默认定义了三代对象集合，索引数越大，对象存活时间越长\r\n\r\n```c\r\n#define NUM_GENERATIONS 3\r\n#define GEN_HEAD(n) (&generations[n].head)\r\n\r\n/* linked lists of container objects */\r\nstatic struct gc_generation generations[NUM_GENERATIONS] = {\r\n    /* PyGC_Head,               threshold,  count */\r\n    {{{GEN_HEAD(0), GEN_HEAD(0), 0}},   700,        0},\r\n    {{{GEN_HEAD(1), GEN_HEAD(1), 0}},   10,     0},\r\n    {{{GEN_HEAD(2), GEN_HEAD(2), 0}},   10,     0},\r\n};\r\n```\r\n#### 新生成的对象会被加入第0代，前面_PyObject_GC_Malloc中省略的部分就是Python GC触发的时机。每新生成一个对象都会检查第0代有没有满，如果满了就开始着手进行垃圾回收.\r\n\r\n```c\r\ng->gc.gc_refs = GC_UNTRACKED;\r\n generations[0].count++; /* number of allocated GC objects */\r\n if (generations[0].count > generations[0].threshold &&\r\n     enabled &&\r\n     generations[0].threshold &&\r\n     !collecting &&\r\n     !PyErr_Occurred()) {\r\n          collecting = 1;\r\n          collect_generations();\r\n          collecting = 0;\r\n }\r\n```\r\n\r\n#### 3.1 在Python中的零代(Generation Zero)\r\n很多时候你的代码也许会在不经意间包含循环引用并且你并未意识到。事实上，当你的Python程序运行的时候它将会建立一定数量的“浮点数垃圾”，Python的GC不能够处理未使用的对象因为应用计数值不会到零。\r\n就是为什么Python要引入Generational GC算法的原因！正如Ruby使用一个链表(free list)来持续追踪未使用的、自由的对象一样，Python使用一种不同的链表来持续追踪活跃的对象。而不将其称之为“活跃列表”，Python的内部C代码将其称为零代(Generation Zero)。每次当你创建一个对象或其他什么值的时候，Python会将其加入零代链表。**请注意到这并不是一个真正的列表，并不能直接在你的代码中访问，事实上这个链表是一个完全内部的Python运行体**\r\n\r\n#### 3.2 Python中的GC阈值\r\n随着你的程序运行，Python解释器保持对新创建的对象，以及因为引用计数为零而被释放掉的对象的追踪。从理论上说，这两个值应该保持一致，因为程序新建的每个对象都应该最终被释放掉。\r\n\r\n当然，事实并非如此。因为循环引用的原因，并且因为你的程序使用了一些比其他对象存在时间更长的对象，从而被分配对象的计数值与被释放对象的计数值之间的差异在逐渐增长。一旦这个差异累计超过某个阈值，则Python的收集机制就启动了，并且触发上边所说到的零代算法，释放“浮动的垃圾”，并且将剩下的对象移动到一代列表。\r\n\r\n随着时间的推移，程序所使用的对象逐渐从零代列表移动到一代列表。而Python对于一代列表中对象的处理遵循同样的方法，一旦被分配计数值与被释放计数值累计到达一定阈值，Python会将剩下的活跃对象移动到二代列表。\r\n\r\n通过这种方法，你的代码所长期使用的对象，那些你的代码持续访问的活跃对象，会从零代链表转移到一代再转移到二代。通过不同的阈值设置，Python可以在不同的时间间隔处理这些对象。Python处理零代最为频繁，其次是一代然后才是二代。\r\n\r\n#### 3.3 弱代假说\r\n来看看代垃圾回收算法的核心行为：**垃圾回收器会更频繁的处理新对象**。一个新的对象即是你的程序刚刚创建的，而一个来的对象则是经过了几个时间周期之后仍然存在的对象。Python会在当一个对象从零代移动到一代，或是从一代移动到二代的过程中提升(promote)这个对象。\r\n\r\n 为什么要这么做？这种算法的根源来自于弱代假说(weak generational hypothesis)。这个假说由两个观点构成：首先是年亲的对象通常死得也快，而老对象则很有可能存活更长的时间。\r\n\r\n 假定现在我用Python或是Ruby创建一个新对象 n1=”ABC”：\r\n\r\n 根据假说，我的代码很可能仅仅会使用ABC很短的时间。这个对象也许仅仅只是一个方法中的中间结果，并且随着方法的返回这个对象就将变成垃圾了。大部分的新对象都是如此般地很快变成垃圾。然而，偶尔程序会创建一些很重要的，存活时间比较长的对象-例如web应用中的session变量或是配置项。\r\n\r\n 通过频繁的处理零代链表中的新对象，Python的垃圾收集器将把时间花在更有意义的地方：它处理那些很快就可能变成垃圾的新对象。同时只在很少的时候，当满足阈值的条件，收集器才回去处理那些老变量。\r\n\r\n\r\n#### 分代回收的逻辑\r\n分配内存\r\n-> 发现超过阈值了\r\n-> 触发垃圾回收\r\n-> 将所有可收集对象链表放到一起\r\n-> 遍历, 计算有效引用计数\r\n-> 分成 有效引用计数=0 和 有效引用计数 > 0 两个集合\r\n-> 大于0的, 放入到更老一代\r\n-> =0的, 执行回收\r\n-> 回收遍历容器内的各个元素, 减掉对应元素引用计数(破掉循环引用)\r\n-> 执行-1的逻辑, 若发现对象引用计数=0, 触发内存回收\r\n-> python底层内存管理机制回收内存\r\n\r\n## 总结\r\n总体来说，在Python中，主要通过引用计数进行垃圾回收；通过 “标记-清除” 解决容器对象可能产生的循环引用问题；通过 “分代回收” 以空间换时间的方法提高垃圾回收效率。\r\n\r\n----\r\n\r\n参考文章：\r\n[一文搞定Python垃圾回收机制](https://www.jianshu.com/p/b0bc1a162933)\r\n[Python垃圾回收机制--完美讲解!](https://www.cnblogs.com/pinganzi/p/6646742.html)\r\n[Python中的垃圾回收机制](https://foofish.net/python-gc.html)\r\n[PYTHON 源码阅读 - 垃圾回收机制](http://www.wklken.me/posts/2015/09/29/python-source-gc.html)\r\n《垃圾回收的算法与实现》','2020-03-04 18:28:29.115800','2020-03-04 18:28:29.115800',1,4);
/*!40000 ALTER TABLE `blog_blog` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `blog_blogtype`
--

DROP TABLE IF EXISTS `blog_blogtype`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `blog_blogtype` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `type_name` varchar(15) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blog_blogtype`
--

LOCK TABLES `blog_blogtype` WRITE;
/*!40000 ALTER TABLE `blog_blogtype` DISABLE KEYS */;
INSERT INTO `blog_blogtype` VALUES (1,'DRF'),(2,'django'),(3,'数据结构与算法'),(4,'python');
/*!40000 ALTER TABLE `blog_blogtype` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `comment_comment`
--

DROP TABLE IF EXISTS `comment_comment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `comment_comment` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `object_id` int(10) unsigned NOT NULL,
  `text` longtext NOT NULL,
  `comment_time` datetime(6) NOT NULL,
  `content_type_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `parent_id` int(11) DEFAULT NULL,
  `root_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `comment_comment_content_type_id_fbfb9793_fk_django_co` (`content_type_id`),
  KEY `comment_comment_parent_id_b612524c_fk_comment_comment_id` (`parent_id`),
  KEY `comment_comment_root_id_28721811_fk_comment_comment_id` (`root_id`),
  KEY `comment_comment_user_id_6078e57b_fk_auth_user_id` (`user_id`),
  CONSTRAINT `comment_comment_content_type_id_fbfb9793_fk_django_co` FOREIGN KEY (`content_type_id`) REFERENCES `django_content_type` (`id`),
  CONSTRAINT `comment_comment_parent_id_b612524c_fk_comment_comment_id` FOREIGN KEY (`parent_id`) REFERENCES `comment_comment` (`id`),
  CONSTRAINT `comment_comment_root_id_28721811_fk_comment_comment_id` FOREIGN KEY (`root_id`) REFERENCES `comment_comment` (`id`),
  CONSTRAINT `comment_comment_user_id_6078e57b_fk_auth_user_id` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=206 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `comment_comment`
--

LOCK TABLES `comment_comment` WRITE;
/*!40000 ALTER TABLE `comment_comment` DISABLE KEYS */;
INSERT INTO `comment_comment` VALUES (205,22,'<p>评论测试</p>','2020-03-07 15:42:58.523704',8,1,NULL,NULL);
/*!40000 ALTER TABLE `comment_comment` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `django_admin_log`
--

DROP TABLE IF EXISTS `django_admin_log`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `django_admin_log` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `action_time` datetime(6) NOT NULL,
  `object_id` longtext,
  `object_repr` varchar(200) NOT NULL,
  `action_flag` smallint(5) unsigned NOT NULL,
  `change_message` longtext NOT NULL,
  `content_type_id` int(11) DEFAULT NULL,
  `user_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `django_admin_log_content_type_id_c4bce8eb_fk_django_co` (`content_type_id`),
  KEY `django_admin_log_user_id_c564eba6_fk_auth_user_id` (`user_id`),
  CONSTRAINT `django_admin_log_content_type_id_c4bce8eb_fk_django_co` FOREIGN KEY (`content_type_id`) REFERENCES `django_content_type` (`id`),
  CONSTRAINT `django_admin_log_user_id_c564eba6_fk_auth_user_id` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=368 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `django_admin_log`
--

LOCK TABLES `django_admin_log` WRITE;
/*!40000 ALTER TABLE `django_admin_log` DISABLE KEYS */;
INSERT INTO `django_admin_log` VALUES (1,'2020-02-20 10:44:41.504991','1','DRF',1,'[{\"added\": {}}]',7,1),(2,'2020-02-20 10:45:29.058378','1','<第一篇博客>',1,'[{\"added\": {}}]',8,1),(3,'2020-02-20 12:16:59.845100','2','<fsfsdf>',1,'[{\"added\": {}}]',8,1),(4,'2020-02-20 12:21:06.608910','2','django',1,'[{\"added\": {}}]',7,1),(5,'2020-02-21 13:04:00.031872','3','<第三方f>',1,'[{\"added\": {}}]',8,1),(6,'2020-02-21 13:04:09.441709','4','<和规划法规和>',1,'[{\"added\": {}}]',8,1),(7,'2020-02-22 16:04:03.611080','5','<源码解析>',1,'[{\"added\": {}}]',8,1),(8,'2020-02-22 19:33:59.542956','6','<C程序设计1>',1,'[{\"added\": {}}]',8,1),(9,'2020-02-22 19:34:53.629303','7','<ghfghfg>',1,'[{\"added\": {}}]',8,1),(10,'2020-02-22 19:40:43.100711','8','<mmnmm>',1,'[{\"added\": {}}]',8,1),(11,'2020-02-22 20:45:28.667200','8','ReadNum object (8)',2,'[{\"changed\": {\"fields\": [\"read_num\"]}}]',9,1),(12,'2020-02-22 22:26:11.691993','8','<mmnmm>',3,'',8,1),(13,'2020-02-22 22:26:11.821618','7','<ghfghfg>',3,'',8,1),(14,'2020-02-22 22:26:11.868493','6','<C程序设计1>',3,'',8,1),(15,'2020-02-22 22:26:11.904425','4','<和规划法规和>',3,'',8,1),(16,'2020-02-22 22:26:12.011120','3','<第三方f>',3,'',8,1),(17,'2020-02-22 22:26:12.036049','2','<fsfsdf>',3,'',8,1),(18,'2020-02-22 22:26:12.189636','1','<第一篇博客>',3,'',8,1),(19,'2020-02-22 22:26:25.593511','5','<DRF源码解析1>',2,'[{\"changed\": {\"fields\": [\"title\"]}}]',8,1),(20,'2020-02-22 22:27:09.832190','9','<DRF源码解析2>',1,'[{\"added\": {}}]',8,1),(21,'2020-02-22 22:27:29.103481','10','<DRF源码解析3>',1,'[{\"added\": {}}]',8,1),(22,'2020-02-22 22:27:41.054491','9','<DRF源码解析2>',2,'[{\"changed\": {\"fields\": [\"content\"]}}]',8,1),(23,'2020-02-22 22:28:02.420387','11','<DRF源码解析4>',1,'[{\"added\": {}}]',8,1),(24,'2020-02-22 22:40:25.663060','9','<DRF源码解析2>',2,'[{\"changed\": {\"fields\": [\"content\"]}}]',8,1),(25,'2020-02-22 22:41:35.618104','9','<DRF源码解析2>',2,'[{\"changed\": {\"fields\": [\"content\"]}}]',8,1),(26,'2020-02-22 22:55:34.142263','9','<DRF源码解析2>',2,'[{\"changed\": {\"fields\": [\"content\"]}}]',8,1),(27,'2020-02-22 23:01:34.943625','9','<DRF源码解析2>',2,'[{\"changed\": {\"fields\": [\"content\"]}}]',8,1),(28,'2020-02-22 23:02:18.982823','9','<DRF源码解析2>',2,'[{\"changed\": {\"fields\": [\"content\"]}}]',8,1),(29,'2020-02-22 23:03:29.964575','9','<DRF源码解析2>',2,'[{\"changed\": {\"fields\": [\"content\"]}}]',8,1),(30,'2020-02-22 23:03:38.574462','10','<DRF源码解析3>',2,'[{\"changed\": {\"fields\": [\"content\"]}}]',8,1),(31,'2020-02-22 23:03:44.635086','11','<DRF源码解析4>',2,'[{\"changed\": {\"fields\": [\"content\"]}}]',8,1),(32,'2020-02-25 17:09:58.310307','1','Comment object (1)',1,'[{\"added\": {}}]',10,1),(33,'2020-02-25 19:38:13.860292','2','Comment object (2)',1,'[{\"added\": {}}]',10,1),(34,'2020-02-25 21:14:56.112738','24','Comment object (24)',3,'',10,1),(35,'2020-02-27 10:30:40.153805','19','Comment object (19)',3,'',10,1),(36,'2020-02-27 10:30:40.310476','18','Comment object (18)',3,'',10,1),(37,'2020-02-27 10:30:40.346558','17','Comment object (17)',3,'',10,1),(38,'2020-02-27 10:30:40.464508','16','Comment object (16)',3,'',10,1),(39,'2020-02-27 10:30:40.488512','15','Comment object (15)',3,'',10,1),(40,'2020-02-27 11:31:00.059939','26','Comment object (26)',3,'',10,1),(41,'2020-02-27 11:31:00.115790','23','Comment object (23)',3,'',10,1),(42,'2020-02-27 11:31:00.150717','21','Comment object (21)',3,'',10,1),(43,'2020-02-27 11:31:00.186600','20','Comment object (20)',3,'',10,1),(44,'2020-02-27 11:31:00.282344','14','Comment object (14)',3,'',10,1),(45,'2020-02-27 11:31:00.318275','13','Comment object (13)',3,'',10,1),(46,'2020-02-27 11:31:00.343182','12','Comment object (12)',3,'',10,1),(47,'2020-02-27 11:31:00.379115','11','Comment object (11)',3,'',10,1),(48,'2020-02-27 11:31:00.404047','10','Comment object (10)',3,'',10,1),(49,'2020-02-27 11:31:00.428391','9','Comment object (9)',3,'',10,1),(50,'2020-02-27 11:31:00.464223','8','Comment object (8)',3,'',10,1),(51,'2020-02-27 11:31:00.500030','7','Comment object (7)',3,'',10,1),(52,'2020-02-27 11:31:00.535488','6','Comment object (6)',3,'',10,1),(53,'2020-02-27 11:31:00.582611','5','Comment object (5)',3,'',10,1),(54,'2020-02-27 11:31:00.618691','4','Comment object (4)',3,'',10,1),(55,'2020-02-27 11:31:00.665656','3','Comment object (3)',3,'',10,1),(56,'2020-02-27 11:31:00.711831','2','Comment object (2)',3,'',10,1),(57,'2020-02-27 11:31:00.758662','1','Comment object (1)',3,'',10,1),(58,'2020-02-27 17:04:19.783450','30','Comment object (30)',3,'',10,1),(59,'2020-02-27 17:04:19.908959','29','Comment object (29)',3,'',10,1),(60,'2020-02-27 17:04:19.944729','28','Comment object (28)',3,'',10,1),(61,'2020-02-27 17:04:19.969572','27','Comment object (27)',3,'',10,1),(62,'2020-02-27 17:05:41.773197','30','Comment object (30)',3,'',10,1),(63,'2020-02-27 17:05:41.960323','29','Comment object (29)',3,'',10,1),(64,'2020-02-27 17:05:42.026491','28','Comment object (28)',3,'',10,1),(65,'2020-02-27 17:05:42.062566','27','Comment object (27)',3,'',10,1),(66,'2020-02-27 17:06:02.618833','30','Comment object (30)',3,'',10,1),(67,'2020-02-27 17:06:02.815946','29','Comment object (29)',3,'',10,1),(68,'2020-02-27 17:06:02.869135','28','Comment object (28)',3,'',10,1),(69,'2020-02-27 17:06:02.916078','27','Comment object (27)',3,'',10,1),(70,'2020-02-27 17:06:02.963114','25','Comment object (25)',3,'',10,1),(71,'2020-02-27 17:19:41.764907','30','Comment object (30)',3,'',10,1),(72,'2020-02-27 17:19:46.671298','29','Comment object (29)',3,'',10,1),(73,'2020-02-27 17:21:34.270435','25','Comment object (25)',3,'',10,1),(74,'2020-02-27 17:21:37.438778','28','Comment object (28)',3,'',10,1),(75,'2020-02-27 17:21:40.412652','27','Comment object (27)',3,'',10,1),(76,'2020-02-27 17:21:43.696130','22','Comment object (22)',3,'',10,1),(77,'2020-02-27 17:51:53.994835','34','Comment object (34)',3,'',10,1),(78,'2020-02-27 18:02:18.966924','38','Comment object (38)',3,'',10,1),(79,'2020-02-27 18:02:21.924850','37','Comment object (37)',3,'',10,1),(80,'2020-02-27 18:02:24.822855','36','Comment object (36)',3,'',10,1),(81,'2020-02-27 18:02:27.926166','35','Comment object (35)',3,'',10,1),(82,'2020-02-27 18:09:20.428841','2','lwj',1,'[{\"added\": {}}]',4,1),(83,'2020-02-27 18:14:21.742601','41','Comment object (41)',3,'',10,1),(84,'2020-02-27 18:14:24.358608','40','Comment object (40)',3,'',10,1),(85,'2020-02-27 18:14:27.191645','39','Comment object (39)',3,'',10,1),(86,'2020-02-27 18:28:30.783917','31','Comment object (31)',3,'',10,1),(87,'2020-02-27 18:30:08.379590','43','Comment object (43)',3,'',10,1),(88,'2020-02-27 18:30:08.423788','42','Comment object (42)',3,'',10,1),(89,'2020-02-27 18:30:08.459378','33','Comment object (33)',3,'',10,1),(90,'2020-02-27 18:30:08.495273','32','Comment object (32)',3,'',10,1),(91,'2020-02-27 18:45:15.632855','47','Comment object (47)',3,'',10,1),(92,'2020-02-27 18:45:15.701665','46','Comment object (46)',3,'',10,1),(93,'2020-02-27 18:45:15.736571','45','Comment object (45)',3,'',10,1),(94,'2020-02-27 18:45:15.761488','44','Comment object (44)',3,'',10,1),(95,'2020-02-27 19:34:40.062683','77','Comment object (77)',3,'',10,1),(96,'2020-02-27 19:34:40.256166','76','Comment object (76)',3,'',10,1),(97,'2020-02-27 19:34:40.364877','75','Comment object (75)',3,'',10,1),(98,'2020-02-27 19:34:40.398785','74','Comment object (74)',3,'',10,1),(99,'2020-02-27 19:34:40.423718','73','Comment object (73)',3,'',10,1),(100,'2020-02-27 19:34:40.448652','72','Comment object (72)',3,'',10,1),(101,'2020-02-27 19:34:40.483558','71','Comment object (71)',3,'',10,1),(102,'2020-02-27 19:34:40.519462','70','Comment object (70)',3,'',10,1),(103,'2020-02-27 19:34:40.544395','69','Comment object (69)',3,'',10,1),(104,'2020-02-27 19:34:40.581301','68','Comment object (68)',3,'',10,1),(105,'2020-02-27 19:34:40.627182','67','Comment object (67)',3,'',10,1),(106,'2020-02-27 19:34:40.652111','66','Comment object (66)',3,'',10,1),(107,'2020-02-27 19:34:40.698061','65','Comment object (65)',3,'',10,1),(108,'2020-02-27 19:34:40.758822','64','Comment object (64)',3,'',10,1),(109,'2020-02-27 19:34:40.819662','63','Comment object (63)',3,'',10,1),(110,'2020-02-27 19:34:40.879669','62','Comment object (62)',3,'',10,1),(111,'2020-02-27 19:34:40.940339','61','Comment object (61)',3,'',10,1),(112,'2020-02-27 19:34:40.987215','60','Comment object (60)',3,'',10,1),(113,'2020-02-27 19:34:41.022119','59','Comment object (59)',3,'',10,1),(114,'2020-02-27 19:34:41.047051','58','Comment object (58)',3,'',10,1),(115,'2020-02-27 19:34:41.082957','57','Comment object (57)',3,'',10,1),(116,'2020-02-27 19:34:41.106891','56','Comment object (56)',3,'',10,1),(117,'2020-02-27 19:34:41.142795','55','Comment object (55)',3,'',10,1),(118,'2020-02-27 19:34:41.178699','54','Comment object (54)',3,'',10,1),(119,'2020-02-27 19:34:41.204634','53','Comment object (53)',3,'',10,1),(120,'2020-02-27 19:34:41.261478','52','Comment object (52)',3,'',10,1),(121,'2020-02-27 19:34:41.297383','51','Comment object (51)',3,'',10,1),(122,'2020-02-27 19:34:41.333286','50','Comment object (50)',3,'',10,1),(123,'2020-02-27 19:34:41.370188','49','Comment object (49)',3,'',10,1),(124,'2020-02-27 19:34:41.404097','48','Comment object (48)',3,'',10,1),(125,'2020-02-27 19:34:50.575231','77','Comment object (77)',3,'',10,1),(126,'2020-02-27 19:34:53.674581','76','Comment object (76)',3,'',10,1),(127,'2020-02-27 19:34:56.729617','75','Comment object (75)',3,'',10,1),(128,'2020-02-27 19:34:59.915365','74','Comment object (74)',3,'',10,1),(129,'2020-02-27 19:35:02.992473','73','Comment object (73)',3,'',10,1),(130,'2020-02-27 19:35:07.302201','72','Comment object (72)',3,'',10,1),(131,'2020-02-27 19:35:10.135573','71','Comment object (71)',3,'',10,1),(132,'2020-02-27 19:35:12.747588','70','Comment object (70)',3,'',10,1),(133,'2020-02-27 19:35:15.195826','69','Comment object (69)',3,'',10,1),(134,'2020-02-27 19:35:17.664336','68','Comment object (68)',3,'',10,1),(135,'2020-02-27 19:35:20.100818','67','Comment object (67)',3,'',10,1),(136,'2020-02-27 19:35:25.181287','66','Comment object (66)',3,'',10,1),(137,'2020-02-27 19:35:25.216166','65','Comment object (65)',3,'',10,1),(138,'2020-02-27 19:35:25.252070','64','Comment object (64)',3,'',10,1),(139,'2020-02-27 19:35:25.287973','63','Comment object (63)',3,'',10,1),(140,'2020-02-27 19:35:25.312915','62','Comment object (62)',3,'',10,1),(141,'2020-02-27 19:35:25.358789','61','Comment object (61)',3,'',10,1),(142,'2020-02-27 19:35:25.412668','60','Comment object (60)',3,'',10,1),(143,'2020-02-27 19:35:25.583183','59','Comment object (59)',3,'',10,1),(144,'2020-02-27 19:35:25.608118','58','Comment object (58)',3,'',10,1),(145,'2020-02-27 19:35:25.644022','57','Comment object (57)',3,'',10,1),(146,'2020-02-27 19:35:25.679927','56','Comment object (56)',3,'',10,1),(147,'2020-02-27 19:35:25.715830','55','Comment object (55)',3,'',10,1),(148,'2020-02-27 19:35:25.739765','54','Comment object (54)',3,'',10,1),(149,'2020-02-27 19:35:25.764698','53','Comment object (53)',3,'',10,1),(150,'2020-02-27 19:35:25.800602','52','Comment object (52)',3,'',10,1),(151,'2020-02-27 19:35:25.836507','51','Comment object (51)',3,'',10,1),(152,'2020-02-27 19:35:25.872411','50','Comment object (50)',3,'',10,1),(153,'2020-02-27 19:35:25.907317','49','Comment object (49)',3,'',10,1),(154,'2020-02-27 19:35:25.932250','48','Comment object (48)',3,'',10,1),(155,'2020-02-27 19:35:34.323516','66','Comment object (66)',3,'',10,1),(156,'2020-02-27 19:35:38.177784','65','Comment object (65)',3,'',10,1),(157,'2020-02-27 19:35:40.812495','64','Comment object (64)',3,'',10,1),(158,'2020-02-27 19:35:43.795704','63','Comment object (63)',3,'',10,1),(159,'2020-02-27 19:35:46.875741','62','Comment object (62)',3,'',10,1),(160,'2020-02-27 19:35:49.695299','61','Comment object (61)',3,'',10,1),(161,'2020-02-27 19:35:52.680604','60','Comment object (60)',3,'',10,1),(162,'2020-02-27 19:35:55.242555','59','Comment object (59)',3,'',10,1),(163,'2020-02-27 19:35:57.528873','58','Comment object (58)',3,'',10,1),(164,'2020-02-27 19:35:59.994109','57','Comment object (57)',3,'',10,1),(165,'2020-02-27 19:36:02.494124','56','Comment object (56)',3,'',10,1),(166,'2020-02-27 19:36:05.211804','55','Comment object (55)',3,'',10,1),(167,'2020-02-27 19:36:08.021888','54','Comment object (54)',3,'',10,1),(168,'2020-02-27 19:36:10.390572','53','Comment object (53)',3,'',10,1),(169,'2020-02-27 19:36:12.735324','52','Comment object (52)',3,'',10,1),(170,'2020-02-27 19:36:15.337691','51','Comment object (51)',3,'',10,1),(171,'2020-02-27 19:36:17.652549','50','Comment object (50)',3,'',10,1),(172,'2020-02-27 19:36:19.836545','49','Comment object (49)',3,'',10,1),(173,'2020-02-27 19:36:22.064164','48','Comment object (48)',3,'',10,1),(174,'2020-02-29 17:05:30.202349','80','Comment object (80)',3,'',10,1),(175,'2020-02-29 17:05:30.247038','79','Comment object (79)',3,'',10,1),(176,'2020-02-29 17:29:28.138356','87','Comment object (87)',3,'',10,1),(177,'2020-02-29 17:29:28.269093','86','Comment object (86)',3,'',10,1),(178,'2020-02-29 17:29:28.294026','85','Comment object (85)',3,'',10,1),(179,'2020-02-29 17:29:28.425649','84','Comment object (84)',3,'',10,1),(180,'2020-02-29 17:29:28.461564','83','Comment object (83)',3,'',10,1),(181,'2020-02-29 17:29:28.486488','82','Comment object (82)',3,'',10,1),(182,'2020-02-29 17:29:28.510423','81','Comment object (81)',3,'',10,1),(183,'2020-02-29 17:29:28.535356','78','Comment object (78)',3,'',10,1),(184,'2020-02-29 17:29:40.104185','87','Comment object (87)',3,'',10,1),(185,'2020-02-29 17:29:40.228127','86','Comment object (86)',3,'',10,1),(186,'2020-02-29 17:29:40.253029','85','Comment object (85)',3,'',10,1),(187,'2020-02-29 17:29:40.277080','84','Comment object (84)',3,'',10,1),(188,'2020-02-29 17:29:40.302037','83','Comment object (83)',3,'',10,1),(189,'2020-02-29 17:29:40.337155','82','Comment object (82)',3,'',10,1),(190,'2020-02-29 17:29:40.373110','81','Comment object (81)',3,'',10,1),(191,'2020-02-29 17:29:46.147930','87','Comment object (87)',3,'',10,1),(192,'2020-02-29 17:29:48.830733','86','Comment object (86)',3,'',10,1),(193,'2020-02-29 17:29:51.382009','85','Comment object (85)',3,'',10,1),(194,'2020-02-29 17:29:54.093898','84','Comment object (84)',3,'',10,1),(195,'2020-02-29 17:29:56.767394','83','Comment object (83)',3,'',10,1),(196,'2020-02-29 17:29:59.210108','82','Comment object (82)',3,'',10,1),(197,'2020-02-29 17:30:02.466990','81','Comment object (81)',3,'',10,1),(198,'2020-02-29 17:30:04.907120','78','Comment object (78)',3,'',10,1),(199,'2020-02-29 17:31:31.350545','88','Comment object (88)',3,'',10,1),(200,'2020-02-29 17:31:48.716774','89','Comment object (89)',3,'',10,1),(201,'2020-02-29 17:40:07.480301','90','Comment object (90)',3,'',10,1),(202,'2020-02-29 18:31:58.629282','94','Comment object (94)',3,'',10,1),(203,'2020-02-29 18:32:01.416805','93','Comment object (93)',3,'',10,1),(204,'2020-02-29 18:32:03.794120','92','Comment object (92)',3,'',10,1),(205,'2020-02-29 18:32:06.174147','91','Comment object (91)',3,'',10,1),(206,'2020-02-29 18:35:15.581199','96','Comment object (96)',3,'',10,1),(207,'2020-02-29 18:35:15.743902','95','Comment object (95)',3,'',10,1),(208,'2020-02-29 18:36:10.354799','97','Comment object (97)',3,'',10,1),(209,'2020-02-29 18:47:29.023552','101','Comment object (101)',3,'',10,1),(210,'2020-02-29 18:47:29.058809','100','Comment object (100)',3,'',10,1),(211,'2020-02-29 18:47:29.105850','99','Comment object (99)',3,'',10,1),(212,'2020-02-29 18:47:29.152765','98','Comment object (98)',3,'',10,1),(213,'2020-02-29 18:47:34.723112','101','Comment object (101)',3,'',10,1),(214,'2020-02-29 18:47:37.258005','100','Comment object (100)',3,'',10,1),(215,'2020-02-29 18:47:40.099498','99','Comment object (99)',3,'',10,1),(216,'2020-02-29 18:47:42.585903','98','Comment object (98)',3,'',10,1),(217,'2020-02-29 19:06:51.066160','107','Comment object (107)',3,'',10,1),(218,'2020-02-29 19:06:53.967116','106','Comment object (106)',3,'',10,1),(219,'2020-02-29 19:06:56.431372','105','Comment object (105)',3,'',10,1),(220,'2020-02-29 19:06:58.815317','104','Comment object (104)',3,'',10,1),(221,'2020-02-29 19:07:00.978589','103','Comment object (103)',3,'',10,1),(222,'2020-02-29 19:07:03.178529','102','Comment object (102)',3,'',10,1),(223,'2020-02-29 19:08:18.724849','113','Comment object (113)',3,'',10,1),(224,'2020-02-29 19:08:21.316917','112','Comment object (112)',3,'',10,1),(225,'2020-02-29 19:08:23.586305','111','Comment object (111)',3,'',10,1),(226,'2020-02-29 19:08:25.813352','110','Comment object (110)',3,'',10,1),(227,'2020-02-29 19:08:29.405402','109','Comment object (109)',3,'',10,1),(228,'2020-02-29 19:08:31.738163','108','Comment object (108)',3,'',10,1),(229,'2020-02-29 19:11:20.218219','119','Comment object (119)',3,'',10,1),(230,'2020-02-29 19:11:22.622733','118','Comment object (118)',3,'',10,1),(231,'2020-02-29 19:11:25.201226','117','Comment object (117)',3,'',10,1),(232,'2020-02-29 19:11:27.617947','116','Comment object (116)',3,'',10,1),(233,'2020-02-29 19:11:29.932368','115','Comment object (115)',3,'',10,1),(234,'2020-02-29 19:11:32.580658','114','Comment object (114)',3,'',10,1),(235,'2020-02-29 19:21:16.257383','121','Comment object (121)',3,'',10,1),(236,'2020-02-29 19:21:25.660747','124','Comment object (124)',3,'',10,1),(237,'2020-02-29 19:21:28.292498','123','Comment object (123)',3,'',10,1),(238,'2020-02-29 19:21:33.511086','122','Comment object (122)',3,'',10,1),(239,'2020-02-29 19:21:36.305979','120','Comment object (120)',3,'',10,1),(240,'2020-02-29 19:24:12.265909','129','Comment object (129)',3,'',10,1),(241,'2020-02-29 20:14:02.576102','133','Comment object (133)',3,'',10,1),(242,'2020-02-29 20:14:02.621557','132','Comment object (132)',3,'',10,1),(243,'2020-02-29 20:14:02.721115','131','Comment object (131)',3,'',10,1),(244,'2020-02-29 20:14:02.768517','130','Comment object (130)',3,'',10,1),(245,'2020-02-29 20:14:02.815545','128','Comment object (128)',3,'',10,1),(246,'2020-02-29 20:14:02.861737','127','Comment object (127)',3,'',10,1),(247,'2020-02-29 20:14:02.898190','126','Comment object (126)',3,'',10,1),(248,'2020-02-29 20:14:02.945178','125','Comment object (125)',3,'',10,1),(249,'2020-02-29 20:14:06.994283','133','Comment object (133)',3,'',10,1),(250,'2020-02-29 20:14:07.118774','132','Comment object (132)',3,'',10,1),(251,'2020-02-29 20:14:07.154535','131','Comment object (131)',3,'',10,1),(252,'2020-02-29 20:14:07.180212','130','Comment object (130)',3,'',10,1),(253,'2020-02-29 20:14:07.226262','128','Comment object (128)',3,'',10,1),(254,'2020-02-29 20:14:07.262151','127','Comment object (127)',3,'',10,1),(255,'2020-02-29 20:14:07.297239','126','Comment object (126)',3,'',10,1),(256,'2020-02-29 20:14:07.344666','125','Comment object (125)',3,'',10,1),(257,'2020-02-29 20:14:12.008635','133','Comment object (133)',3,'',10,1),(258,'2020-02-29 20:14:14.350535','132','Comment object (132)',3,'',10,1),(259,'2020-02-29 20:14:17.219799','131','Comment object (131)',3,'',10,1),(260,'2020-02-29 20:14:19.615837','130','Comment object (130)',3,'',10,1),(261,'2020-02-29 20:14:22.915052','128','Comment object (128)',3,'',10,1),(262,'2020-02-29 20:14:26.012647','127','Comment object (127)',3,'',10,1),(263,'2020-02-29 20:14:28.619765','126','Comment object (126)',3,'',10,1),(264,'2020-02-29 20:14:31.448857','125','Comment object (125)',3,'',10,1),(265,'2020-02-29 21:37:52.001123','148','Comment object (148)',3,'',10,1),(266,'2020-02-29 21:37:52.138084','147','Comment object (147)',3,'',10,1),(267,'2020-02-29 21:37:52.162099','146','Comment object (146)',3,'',10,1),(268,'2020-02-29 21:37:52.187100','145','Comment object (145)',3,'',10,1),(269,'2020-02-29 21:37:52.223039','144','Comment object (144)',3,'',10,1),(270,'2020-02-29 21:37:52.405551','143','Comment object (143)',3,'',10,1),(271,'2020-02-29 21:37:52.511268','141','Comment object (141)',3,'',10,1),(272,'2020-02-29 21:37:52.552160','140','Comment object (140)',3,'',10,1),(273,'2020-02-29 21:37:52.577092','139','Comment object (139)',3,'',10,1),(274,'2020-02-29 21:37:52.612426','138','Comment object (138)',3,'',10,1),(275,'2020-02-29 21:37:52.637692','137','Comment object (137)',3,'',10,1),(276,'2020-02-29 21:42:40.046199','151','Comment object (151)',3,'',10,1),(277,'2020-02-29 21:42:40.098061','150','Comment object (150)',3,'',10,1),(278,'2020-02-29 21:42:40.133253','149','Comment object (149)',3,'',10,1),(279,'2020-02-29 21:43:07.987615','154','Comment object (154)',3,'',10,1),(280,'2020-02-29 21:43:08.124704','153','Comment object (153)',3,'',10,1),(281,'2020-02-29 21:44:43.857277','157','Comment object (157)',3,'',10,1),(282,'2020-02-29 21:44:43.891643','156','Comment object (156)',3,'',10,1),(283,'2020-02-29 21:44:43.927544','155','Comment object (155)',3,'',10,1),(284,'2020-02-29 21:44:43.951389','152','Comment object (152)',3,'',10,1),(285,'2020-02-29 21:46:48.636454','161','Comment object (161)',3,'',10,1),(286,'2020-02-29 21:46:48.783062','160','Comment object (160)',3,'',10,1),(287,'2020-02-29 21:46:48.806998','159','Comment object (159)',3,'',10,1),(288,'2020-02-29 21:46:48.842902','158','Comment object (158)',3,'',10,1),(289,'2020-02-29 21:47:34.773221','164','Comment object (164)',3,'',10,1),(290,'2020-02-29 21:47:34.934678','163','Comment object (163)',3,'',10,1),(291,'2020-02-29 21:47:34.970582','162','Comment object (162)',3,'',10,1),(292,'2020-02-29 21:53:41.687065','167','Comment object (167)',3,'',10,1),(293,'2020-02-29 21:53:41.742004','166','Comment object (166)',3,'',10,1),(294,'2020-02-29 21:53:41.766934','165','Comment object (165)',3,'',10,1),(295,'2020-02-29 21:53:41.802938','142','Comment object (142)',3,'',10,1),(296,'2020-02-29 21:55:38.211937','171','Comment object (171)',3,'',10,1),(297,'2020-02-29 21:55:38.337782','170','Comment object (170)',3,'',10,1),(298,'2020-02-29 21:55:38.372762','169','Comment object (169)',3,'',10,1),(299,'2020-02-29 21:55:38.397881','168','Comment object (168)',3,'',10,1),(300,'2020-02-29 23:21:16.206425','180','Comment object (180)',3,'',10,1),(301,'2020-02-29 23:21:16.336052','179','Comment object (179)',3,'',10,1),(302,'2020-02-29 23:21:16.360985','178','Comment object (178)',3,'',10,1),(303,'2020-02-29 23:21:16.396889','177','Comment object (177)',3,'',10,1),(304,'2020-02-29 23:21:16.420942','176','Comment object (176)',3,'',10,1),(305,'2020-02-29 23:21:16.445939','175','Comment object (175)',3,'',10,1),(306,'2020-02-29 23:21:16.481914','174','Comment object (174)',3,'',10,1),(307,'2020-02-29 23:21:16.517760','173','Comment object (173)',3,'',10,1),(308,'2020-02-29 23:21:16.564275','172','Comment object (172)',3,'',10,1),(309,'2020-02-29 23:24:56.664481','184','Comment object (184)',3,'',10,1),(310,'2020-02-29 23:24:56.794134','183','Comment object (183)',3,'',10,1),(311,'2020-02-29 23:24:56.889754','182','Comment object (182)',3,'',10,1),(312,'2020-02-29 23:24:56.925591','181','Comment object (181)',3,'',10,1),(313,'2020-03-04 18:24:39.374227','3','数据结构与算法',1,'[{\"added\": {}}]',7,1),(314,'2020-03-04 18:24:55.226677','12','<每日一道算法之--二叉树的层次遍历>',1,'[{\"added\": {}}]',8,1),(315,'2020-03-04 18:25:16.631134','13','<每日一道算法之--买卖股票的最佳时机>',1,'[{\"added\": {}}]',8,1),(316,'2020-03-04 18:25:36.533342','14','<每日一道算法之--三数之和>',1,'[{\"added\": {}}]',8,1),(317,'2020-03-04 18:25:55.172635','15','<每日一道算法之--乘积最大子序和>',1,'[{\"added\": {}}]',8,1),(318,'2020-03-04 18:26:11.989981','16','<每日一道算法之--有效的括号>',1,'[{\"added\": {}}]',8,1),(319,'2020-03-04 18:26:28.466979','17','<每日一道算法之--链表反转>',1,'[{\"added\": {}}]',8,1),(320,'2020-03-04 18:26:45.294116','18','<每日一道算法之--无重复的最长的子字符串>',1,'[{\"added\": {}}]',8,1),(321,'2020-03-04 18:27:04.589772','19','<每日一道算法之--股票问题总结>',1,'[{\"added\": {}}]',8,1),(322,'2020-03-04 18:27:20.632419','4','python',1,'[{\"added\": {}}]',7,1),(323,'2020-03-04 18:27:31.705599','20','<python与其他语言的对比>',1,'[{\"added\": {}}]',8,1),(324,'2020-03-04 18:28:02.612800','21','<python单例模式的实现>',1,'[{\"added\": {}}]',8,1),(325,'2020-03-04 18:28:29.116822','22','<python的垃圾回收机制>',1,'[{\"added\": {}}]',8,1),(326,'2020-03-04 18:28:35.811229','22','<python的垃圾回收机制>',2,'[{\"changed\": {\"fields\": [\"content\"]}}]',8,1),(327,'2020-03-04 18:28:40.817920','22','<python的垃圾回收机制>',2,'[]',8,1),(328,'2020-03-04 18:28:45.865393','21','<python单例模式的实现>',2,'[{\"changed\": {\"fields\": [\"content\"]}}]',8,1),(329,'2020-03-04 18:28:50.608651','20','<python与其他语言的对比>',2,'[{\"changed\": {\"fields\": [\"content\"]}}]',8,1),(330,'2020-03-04 18:28:54.434357','19','<每日一道算法之--股票问题总结>',2,'[{\"changed\": {\"fields\": [\"content\"]}}]',8,1),(331,'2020-03-04 18:28:58.464315','18','<每日一道算法之--无重复的最长的子字符串>',2,'[{\"changed\": {\"fields\": [\"content\"]}}]',8,1),(332,'2020-03-04 18:29:02.923466','17','<每日一道算法之--链表反转>',2,'[{\"changed\": {\"fields\": [\"content\"]}}]',8,1),(333,'2020-03-04 18:29:08.041812','16','<每日一道算法之--有效的括号>',2,'[{\"changed\": {\"fields\": [\"content\"]}}]',8,1),(334,'2020-03-04 18:29:13.289979','15','<每日一道算法之--乘积最大子序和>',2,'[{\"changed\": {\"fields\": [\"content\"]}}]',8,1),(335,'2020-03-04 18:29:18.431813','14','<每日一道算法之--三数之和>',2,'[{\"changed\": {\"fields\": [\"content\"]}}]',8,1),(336,'2020-03-04 18:29:23.327635','13','<每日一道算法之--买卖股票的最佳时机>',2,'[{\"changed\": {\"fields\": [\"content\"]}}]',8,1),(337,'2020-03-04 18:29:28.642527','12','<每日一道算法之--二叉树的层次遍历>',2,'[{\"changed\": {\"fields\": [\"content\"]}}]',8,1),(338,'2020-03-04 18:29:42.980124','197','Comment object (197)',3,'',10,1),(339,'2020-03-04 18:29:43.119650','196','Comment object (196)',3,'',10,1),(340,'2020-03-04 18:29:43.156088','195','Comment object (195)',3,'',10,1),(341,'2020-03-04 18:29:43.190994','194','Comment object (194)',3,'',10,1),(342,'2020-03-04 18:29:43.226899','193','Comment object (193)',3,'',10,1),(343,'2020-03-04 18:29:43.252210','192','Comment object (192)',3,'',10,1),(344,'2020-03-04 18:29:43.287147','191','Comment object (191)',3,'',10,1),(345,'2020-03-04 18:29:43.323020','190','Comment object (190)',3,'',10,1),(346,'2020-03-04 18:29:43.358437','189','Comment object (189)',3,'',10,1),(347,'2020-03-04 18:29:43.383370','188','Comment object (188)',3,'',10,1),(348,'2020-03-04 18:29:43.419274','187','Comment object (187)',3,'',10,1),(349,'2020-03-04 18:29:43.455194','186','Comment object (186)',3,'',10,1),(350,'2020-03-04 18:29:43.562897','185','Comment object (185)',3,'',10,1),(351,'2020-03-04 18:29:43.586905','136','Comment object (136)',3,'',10,1),(352,'2020-03-04 18:29:43.611760','135','Comment object (135)',3,'',10,1),(353,'2020-03-04 18:29:43.647664','134','Comment object (134)',3,'',10,1),(354,'2020-03-06 12:03:11.596855','3','jiang1',3,'',4,1),(355,'2020-03-06 12:04:49.570335','4','jiang1',3,'',4,1),(356,'2020-03-06 12:04:49.696996','2','lwj',3,'',4,1),(357,'2020-03-06 13:16:27.791707','5','root1',3,'',4,1),(358,'2020-03-06 16:28:58.765065','6','root1',2,'[{\"changed\": {\"fields\": [\"email\"]}}]',4,1),(359,'2020-03-07 10:31:52.171320','1','jiang',2,'[{\"changed\": {\"fields\": [\"email\"]}}]',4,1),(360,'2020-03-07 15:25:16.437438','1','jiang',2,'[{\"changed\": {\"fields\": [\"email\"]}}]',4,1),(361,'2020-03-07 15:25:25.579093','199','Comment object (199)',3,'',10,1),(362,'2020-03-07 15:25:25.607016','198','Comment object (198)',3,'',10,1),(363,'2020-03-07 15:35:08.346577','204','Comment object (204)',3,'',10,1),(364,'2020-03-07 15:35:08.478224','203','Comment object (203)',3,'',10,1),(365,'2020-03-07 15:35:08.514128','202','Comment object (202)',3,'',10,1),(366,'2020-03-07 15:35:08.550032','201','Comment object (201)',3,'',10,1),(367,'2020-03-07 15:35:08.585938','200','Comment object (200)',3,'',10,1);
/*!40000 ALTER TABLE `django_admin_log` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `django_content_type`
--

DROP TABLE IF EXISTS `django_content_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `django_content_type` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `app_label` varchar(100) NOT NULL,
  `model` varchar(100) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `django_content_type_app_label_model_76bd3d3b_uniq` (`app_label`,`model`)
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `django_content_type`
--

LOCK TABLES `django_content_type` WRITE;
/*!40000 ALTER TABLE `django_content_type` DISABLE KEYS */;
INSERT INTO `django_content_type` VALUES (1,'admin','logentry'),(3,'auth','group'),(2,'auth','permission'),(4,'auth','user'),(8,'blog','blog'),(7,'blog','blogtype'),(10,'comment','comment'),(5,'contenttypes','contenttype'),(12,'likes','likecount'),(11,'likes','likerecord'),(9,'read_statistics','readnum'),(6,'sessions','session');
/*!40000 ALTER TABLE `django_content_type` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `django_migrations`
--

DROP TABLE IF EXISTS `django_migrations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `django_migrations` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `app` varchar(255) NOT NULL,
  `name` varchar(255) NOT NULL,
  `applied` datetime(6) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=28 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `django_migrations`
--

LOCK TABLES `django_migrations` WRITE;
/*!40000 ALTER TABLE `django_migrations` DISABLE KEYS */;
INSERT INTO `django_migrations` VALUES (1,'contenttypes','0001_initial','2020-02-20 10:18:56.076901'),(2,'auth','0001_initial','2020-02-20 10:18:58.720189'),(3,'admin','0001_initial','2020-02-20 10:19:05.127214'),(4,'admin','0002_logentry_remove_auto_add','2020-02-20 10:19:07.020551'),(5,'admin','0003_logentry_add_action_flag_choices','2020-02-20 10:19:07.076437'),(6,'contenttypes','0002_remove_content_type_name','2020-02-20 10:19:08.332243'),(7,'auth','0002_alter_permission_name_max_length','2020-02-20 10:19:09.014866'),(8,'auth','0003_alter_user_email_max_length','2020-02-20 10:19:09.704793'),(9,'auth','0004_alter_user_username_opts','2020-02-20 10:19:09.757653'),(10,'auth','0005_alter_user_last_login_null','2020-02-20 10:19:10.269283'),(11,'auth','0006_require_contenttypes_0002','2020-02-20 10:19:10.314164'),(12,'auth','0007_alter_validators_add_error_messages','2020-02-20 10:19:10.407023'),(13,'auth','0008_alter_user_username_max_length','2020-02-20 10:19:11.060685'),(14,'auth','0009_alter_user_last_name_max_length','2020-02-20 10:19:12.141714'),(15,'auth','0010_alter_group_name_max_length','2020-02-20 10:19:13.034836'),(16,'auth','0011_update_proxy_permissions','2020-02-20 10:19:13.088409'),(17,'blog','0001_initial','2020-02-20 10:19:13.572194'),(18,'sessions','0001_initial','2020-02-20 10:19:15.397620'),(19,'blog','0002_auto_20200221_1951','2020-02-21 11:51:37.710347'),(20,'read_statistics','0001_initial','2020-02-22 18:13:18.345264'),(21,'comment','0001_initial','2020-02-24 22:10:21.704800'),(22,'comment','0002_auto_20200227_1128','2020-02-27 11:28:31.837444'),(23,'comment','0003_comment_root','2020-02-27 15:44:45.984663'),(24,'comment','0004_auto_20200227_1546','2020-02-27 15:46:35.687474'),(25,'blog','0003_auto_20200229_2137','2020-02-29 21:37:25.606935'),(26,'comment','0005_auto_20200229_2137','2020-02-29 21:37:30.463503'),(27,'likes','0001_initial','2020-03-01 19:18:37.753259');
/*!40000 ALTER TABLE `django_migrations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `django_session`
--

DROP TABLE IF EXISTS `django_session`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `django_session` (
  `session_key` varchar(40) NOT NULL,
  `session_data` longtext NOT NULL,
  `expire_date` datetime(6) NOT NULL,
  PRIMARY KEY (`session_key`),
  KEY `django_session_expire_date_a5c62663` (`expire_date`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `django_session`
--

LOCK TABLES `django_session` WRITE;
/*!40000 ALTER TABLE `django_session` DISABLE KEYS */;
INSERT INTO `django_session` VALUES ('168ezpmlfskyhd2fu3e0sy1p9fvlefi2','NTFiMTdkNDViYmNkZGFlMzk0NmEyYWFiMDkzYjU4MzU5MzU0MGU3ZDp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiJhYTYzOTE5YjA5OGU4NTE3MTFiZTA1NTBlZjgyYjQ1YzY1OTc3OWJlIn0=','2020-03-06 13:03:47.003156'),('b8r83ph9wyu8icq3l1hljvvfrpo3hmd8','YmNmMmZiODhiNGE3Y2E5NGI2Yzg4ZDhhYmM3YzQ2OWY4MTU0YzZiNzp7InZfY29kZSI6Ik01OUwiLCJzZW5kX2NvZGVfdGltZSI6MTU4MzU2NTk5MywiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaGFzaCI6ImIyNGNiYjBhOTdiMTU2Zjg5NTM0NGI2ODY1MzM1YzFiMzBmMzQzNjcifQ==','2020-03-21 15:26:43.208364'),('g1ey66n52gdo1icumgh4240uozg590h6','NmRmYjM0YzcxZDA3ZTQ1NjFjNzQwMWU4OWVjYTQyMWVkYjFiZDhjMDp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIzNWU2MDM2YjY1Nzk5ZTVjMDQ4ZTgyZTg1ZWRmMjcwMDg5NDdlZTJhIn0=','2020-03-05 10:44:28.379858'),('lzxjy48wou7e4ejupx58utqp31lo3769','N2IxZDE5OGYwY2NmZWY3YTU1NWFiYTA1NWE5YjkzM2QxMmU2OWIwNDp7InZfY29kZSI6IjVNWUIiLCJfYXV0aF91c2VyX2lkIjoiMSIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiYWE2MzkxOWIwOThlODUxNzExYmUwNTUwZWY4MmI0NWM2NTk3NzliZSJ9','2020-03-10 13:03:02.764875'),('yn9gskvof4sj8grsqgtnh1chatw8xrsz','M2MwM2ViMmVhMzFmZTliNDhiZWIzNDVhM2IzN2RlNGMwMDBlYWRkNTp7Il9hdXRoX3VzZXJfaWQiOiIyIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIwNGNjOGIxMWVkODJjYWZiMDkyYTc2MDU1NWRhYmM1M2EwOGJkYzY5In0=','2020-03-12 18:10:31.345305');
/*!40000 ALTER TABLE `django_session` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `likes_likecount`
--

DROP TABLE IF EXISTS `likes_likecount`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `likes_likecount` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `object_id` int(10) unsigned NOT NULL,
  `like_count` int(11) NOT NULL,
  `content_type_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `likes_likecount_content_type_id_a33eb91e_fk_django_co` (`content_type_id`),
  CONSTRAINT `likes_likecount_content_type_id_a33eb91e_fk_django_co` FOREIGN KEY (`content_type_id`) REFERENCES `django_content_type` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=23 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `likes_likecount`
--

LOCK TABLES `likes_likecount` WRITE;
/*!40000 ALTER TABLE `likes_likecount` DISABLE KEYS */;
INSERT INTO `likes_likecount` VALUES (1,135,0,10),(2,136,0,10),(3,185,1,10),(4,134,0,10),(5,186,0,10),(6,188,0,10),(7,189,0,10),(8,190,0,10),(9,191,0,10),(10,192,0,10),(11,193,0,10),(12,194,0,10),(13,195,0,10),(14,196,0,10),(15,197,0,10),(16,187,0,10),(17,199,0,10),(18,198,0,10),(19,200,0,10),(20,201,0,10),(21,202,0,10),(22,203,0,10);
/*!40000 ALTER TABLE `likes_likecount` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `likes_likerecord`
--

DROP TABLE IF EXISTS `likes_likerecord`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `likes_likerecord` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `object_id` int(10) unsigned NOT NULL,
  `like_time` datetime(6) NOT NULL,
  `content_type_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `likes_likerecord_content_type_id_4e35de35_fk_django_co` (`content_type_id`),
  KEY `likes_likerecord_user_id_c85b88bd_fk_auth_user_id` (`user_id`),
  CONSTRAINT `likes_likerecord_content_type_id_4e35de35_fk_django_co` FOREIGN KEY (`content_type_id`) REFERENCES `django_content_type` (`id`),
  CONSTRAINT `likes_likerecord_user_id_c85b88bd_fk_auth_user_id` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=51 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `likes_likerecord`
--

LOCK TABLES `likes_likerecord` WRITE;
/*!40000 ALTER TABLE `likes_likerecord` DISABLE KEYS */;
INSERT INTO `likes_likerecord` VALUES (49,185,'2020-03-01 22:10:43.233184',10,1);
/*!40000 ALTER TABLE `likes_likerecord` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `my_cache_table`
--

DROP TABLE IF EXISTS `my_cache_table`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `my_cache_table` (
  `cache_key` varchar(255) NOT NULL,
  `value` longtext NOT NULL,
  `expires` datetime(6) NOT NULL,
  PRIMARY KEY (`cache_key`),
  KEY `my_cache_table_expires` (`expires`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `my_cache_table`
--

LOCK TABLES `my_cache_table` WRITE;
/*!40000 ALTER TABLE `my_cache_table` DISABLE KEYS */;
INSERT INTO `my_cache_table` VALUES (':1:hot_blogs','','2020-02-22 23:20:39.000000');
/*!40000 ALTER TABLE `my_cache_table` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `read_statistics_readnum`
--

DROP TABLE IF EXISTS `read_statistics_readnum`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `read_statistics_readnum` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `read_num` int(11) NOT NULL,
  `object_id` int(10) unsigned NOT NULL,
  `content_type_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `read_statistics_read_content_type_id_560f0f39_fk_django_co` (`content_type_id`),
  CONSTRAINT `read_statistics_read_content_type_id_560f0f39_fk_django_co` FOREIGN KEY (`content_type_id`) REFERENCES `django_content_type` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=18 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `read_statistics_readnum`
--

LOCK TABLES `read_statistics_readnum` WRITE;
/*!40000 ALTER TABLE `read_statistics_readnum` DISABLE KEYS */;
INSERT INTO `read_statistics_readnum` VALUES (1,6,5,8),(9,12,11,8),(10,12,10,8),(11,6,9,8),(12,6,22,8),(13,1,16,8),(14,1,18,8),(15,2,21,8),(16,1,20,8),(17,1,19,8);
/*!40000 ALTER TABLE `read_statistics_readnum` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2020-03-07 18:29:27
